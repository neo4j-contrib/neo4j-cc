# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type User {
  id: ID!
  firstName: String!
  lastName: String!
  isActive: Boolean!
}

type DataCatalog {
  """UUID"""
  id: ID!
  labels: [String!]
  name: String

  """A brief description of this Thing."""
  description: String
  url: String

  """Reference to Person who created the work."""
  creator: ID

  """Reference to Person who published the work."""
  publisher: ID
  dateCreated: String
  dateModified: String
  license: String
}

type Dataset {
  """UUID"""
  id: ID!
  labels: [String!]
  name: String

  """A brief description of this Thing."""
  description: String
  url: String

  """Reference to Person who created the work."""
  creator: ID

  """Reference to Person who published the work."""
  publisher: ID
  dateCreated: String
  dateModified: String
  license: String

  """
  URL to the direct data download. Distinct from the optional "url" field, which should lead to a page about the data.
  """
  distribution: String!

  """
  Media type typically expressed using a MIME format (see IANA site and MDN reference) e.g. application/zip for a SoftwareApplication binary, audio/mpeg for .mp3 etc.).
  """
  encodingFormat: String!
}

type Person {
  """UUID"""
  id: ID!
  labels: [String!]
  name: String

  """A brief description of this Thing."""
  description: String
  url: String

  """
  A callsign, as used in broadcasting and radio communications to identify people, radio and TV stations, or vehicles. Typically correlates with username, when available.
  """
  callSign: String

  """Primary email address"""
  email: String
}

type SoftwareSourceCode {
  """UUID"""
  id: ID!
  labels: [String!]
  name: String

  """A brief description of this Thing."""
  description: String
  url: String

  """Reference to Person who created the work."""
  creator: ID

  """Reference to Person who published the work."""
  publisher: ID
  dateCreated: String
  dateModified: String
  license: String

  """
  Link to the repository where the un-compiled, human readable code and related code is located (SVN, github, CodePlex).
  """
  codeRepository: String

  """The computer programming language."""
  programmingLanguage: String

  """
  Runtime platform or script interpreter dependencies (Example - Java v1, Python2.3, .Net Framework 3.0).
  """
  runtimePlatform: String
}

type Notebook {
  """UUID"""
  id: ID!
  labels: [String!]
  name: String

  """A brief description of this Thing."""
  description: String
  url: String

  """Reference to Person who created the work."""
  creator: ID

  """Reference to Person who published the work."""
  publisher: ID
  dateCreated: String
  dateModified: String
  license: String

  """
  Link to the repository where the un-compiled, human readable code and related code is located (SVN, github, CodePlex).
  """
  codeRepository: String

  """The computer programming language."""
  programmingLanguage: String

  """
  Runtime platform or script interpreter dependencies (Example - Java v1, Python2.3, .Net Framework 3.0).
  """
  runtimePlatform: String

  """
  The spoken language of the content or performance or used in an action. Please use one of the language codes from the IETF BCP 47 standard. See also availableLanguage. Supersedes language.
  """
  inLanguage: String
}

type Organization {
  """UUID"""
  id: ID!
  labels: [String!]
  name: String

  """A brief description of this Thing."""
  description: String
  url: String

  """Primary email address"""
  email: String
}

type SoftwareApplication {
  """UUID"""
  id: ID!
  labels: [String!]
  name: String

  """A brief description of this Thing."""
  description: String
  url: String

  """Reference to Person who created the work."""
  creator: ID

  """Reference to Person who published the work."""
  publisher: ID
  dateCreated: String
  dateModified: String
  license: String

  """Semantic version of the software instance."""
  softwareVersion: String

  """Type of software application, e.g. "Game, Multimedia"."""
  applicationCategory: String

  """If the file can be downloaded, URL to download the binary."""
  downloadUrl: String

  """
  URL at which the app may be installed, if different from the URL of the item.
  """
  installUrl: String

  """Operating systems supported (Windows 7, OSX 10.6, Android 1.6)."""
  operatingSystem: String
}

type Event {
  """UUID"""
  id: ID!
  labels: [String!]
  name: String

  """A brief description of this Thing."""
  description: String
  url: String

  """
  The duration of the item (movie, audio recording, event, etc.) in ISO 8601 date format.
  """
  duration: String!

  """The end date and time of the item (in ISO 8601 date format)."""
  endDate: String!

  """The start date and time of the item (in ISO 8601 date format)."""
  startDate: String!

  """
  The location of, for example, where an event is happening, where an organization is located, or where an action takes place.
  """
  location: String!
}

type Course {
  """UUID"""
  id: ID!
  labels: [String!]
  name: String

  """A brief description of this Thing."""
  description: String
  url: String

  """Reference to Person who created the work."""
  creator: ID

  """Reference to Person who published the work."""
  publisher: ID
  dateCreated: String
  dateModified: String
  license: String

  """The certification awarded for successful completion of this course."""
  award: String!

  """
  The LearningResource being described is intended to help a person learn the competency or learning outcome defined by the referenced term.
  """
  teaches: String

  """
  Knowledge, skill, ability or personal attribute that must be demonstrated by a person or other entity in order to do something such as earn an Educational Occupational Credential or understand a LearningResource.
  """
  competencyRequired: [String!]

  """
  The identifier for the Course used by the course provider (e.g. CS101 or cypher-101)
  """
  courseCode: String!
}

type Book {
  """UUID"""
  id: ID!
  labels: [String!]
  name: String

  """A brief description of this Thing."""
  description: String
  url: String

  """Reference to Person who created the work."""
  creator: ID

  """Reference to Person who published the work."""
  publisher: ID
  dateCreated: String
  dateModified: String
  license: String

  """The ISBN of the book"""
  isbn: String!
}

type Article {
  """UUID"""
  id: ID!
  labels: [String!]
  name: String

  """A brief description of this Thing."""
  description: String
  url: String

  """Reference to Person who created the work."""
  creator: ID

  """Reference to Person who published the work."""
  publisher: ID
  dateCreated: String
  dateModified: String
  license: String
}

type Comment {
  """UUID"""
  id: ID!
  labels: [String!]
  name: String

  """A brief description of this Thing."""
  description: String
  url: String

  """Reference to Person who created the work."""
  creator: ID

  """Reference to Person who published the work."""
  publisher: ID
  dateCreated: String
  dateModified: String
  license: String
  text: String

  """
  The number of upvotes this question, answer or comment has received from the community.
  """
  upvoteCount: Int!

  """
  The number of downvotes this question, answer or comment has received from the community.
  """
  downvoteCount: Int!
}

type IncludedInDataCatalog {
  """UUID"""
  id: ID!
  labels: [String!]
  name: String

  """A brief description of this Thing."""
  description: String
  url: String

  """from entity UUID"""
  from: Dataset!

  """to entity UUID"""
  to: Dataset!
}

type Query {
  users: [User!]!
  user(id: ID!): User!
  dataCatalogs: [DataCatalog!]!
  dataCatalog(id: ID!): DataCatalog!
  datasets: [Dataset!]!
  dataset(id: ID!): Dataset!
  persons: [Person!]!
  person(id: ID!): Person!
  notebooks: [Notebook!]!
  notebook(id: ID!): Notebook!
  organizations: [Organization!]!
  organization(id: ID!): Organization!
  softwareApplications: [SoftwareApplication!]!
  softwareApplication(id: ID!): SoftwareApplication!
  softwareSourceCodes: [SoftwareSourceCode!]!
  softwareSourceCode(id: ID!): SoftwareSourceCode!
  events: [Event!]!
  event(id: ID!): Event!
  courses: [Course!]!
  course(id: ID!): Course!
  books: [Book!]!
  book(id: ID!): Book!
  articles: [Article!]!
  article(id: ID!): Article!
  comments: [Comment!]!
  comment(id: ID!): Comment!
  includedInDataCatalogs: [IncludedInDataCatalog!]!
  includedInDataCatalog(id: ID!): IncludedInDataCatalog!
}

type Mutation {
  createUser(createUserInput: CreateUserInput!): User!
  updateUser(updateUserInput: UpdateUserInput!): User!
  removeUser(id: ID!): Boolean!
  createDataCatalog(createDataCatalogInput: CreateDataCatalogInput!): DataCatalog!
  updateDataCatalog(updateDataCatalogInput: UpdateDataCatalogInput!, id: ID!): DataCatalog!
  removeDataCatalog(id: ID!): Boolean!
  createDataset(createDatasetInput: CreateDatasetInput!): Dataset!
  updateDataset(updateDatasetInput: UpdateDatasetInput!, id: ID!): Dataset!
  removeDataset(id: ID!): Boolean!
  createPerson(createPersonInput: CreatePersonInput!): Person!
  updatePerson(updatePersonInput: UpdatePersonInput!, id: ID!): Person!
  removePerson(id: ID!): Boolean!
  createNotebook(createNotebookInput: CreateNotebookInput!): Notebook!
  updateNotebook(updateNotebookInput: UpdateNotebookInput!, id: ID!): Notebook!
  removeNotebook(id: ID!): Boolean!
  createOrganization(createOrganizationInput: CreateOrganizationInput!): Organization!
  updateOrganization(updateOrganizationInput: UpdateOrganizationInput!, id: ID!): Organization!
  removeOrganization(id: ID!): Boolean!
  createSoftwareApplication(createSoftwareApplicationInput: CreateSoftwareApplicationInput!): SoftwareApplication!
  updateSoftwareApplication(updateSoftwareApplicationInput: UpdateSoftwareApplicationInput!, id: ID!): SoftwareApplication!
  removeSoftwareApplication(id: ID!): Boolean!
  createSoftwareSourceCode(createSoftwareSourceCodeInput: CreateSoftwareSourceCodeInput!): SoftwareSourceCode!
  updateSoftwareSourceCode(updateSoftwareSourceCodeInput: UpdateSoftwareSourceCodeInput!, id: ID!): SoftwareSourceCode!
  removeSoftwareSourceCode(id: ID!): Boolean!
  createEvent(createEventInput: CreateEventInput!): Event!
  updateEvent(updateEventInput: UpdateEventInput!, id: ID!): Event!
  removeEvent(id: ID!): Boolean!
  createCourse(createCourseInput: CreateCourseInput!): Course!
  updateCourse(updateCourseInput: UpdateCourseInput!, id: ID!): Course!
  removeCourse(id: ID!): Boolean!
  createBook(createBookInput: CreateBookInput!): Book!
  updateBook(updateBookInput: UpdateBookInput!, id: ID!): Book!
  removeBook(id: ID!): Boolean!
  createArticle(createArticleInput: CreateArticleInput!): Article!
  updateArticle(updateArticleInput: UpdateArticleInput!, id: ID!): Article!
  removeArticle(id: ID!): Boolean!
  createComment(createCommentInput: CreateCommentInput!): Comment!
  updateComment(updateCommentInput: UpdateCommentInput!, id: ID!): Comment!
  removeComment(id: ID!): Boolean!
  createIncludedInDataCatalog(createIncludedInDataCatalogInput: CreateIncludedInDataCatalogInput = {labels: []}, to: ID!, from: ID!): IncludedInDataCatalog!
  updateIncludedInDataCatalog(updateIncludedInDataCatalogInput: UpdateIncludedInDataCatalogInput!, id: ID!): IncludedInDataCatalog!
  removeIncludedInDataCatalog(id: ID!): IncludedInDataCatalog!
}

input CreateUserInput {
  firstName: String = "Unidentified"
  lastName: String!
  isActive: Boolean = true
}

input UpdateUserInput {
  id: ID
  firstName: String = "Unidentified"
  lastName: String
  isActive: Boolean = true
}

input CreateDataCatalogInput {
  labels: [String!] = []
  name: String

  """A brief description of this Thing."""
  description: String
  url: String

  """Reference to Person who created the work."""
  creator: ID

  """Reference to Person who published the work."""
  publisher: ID
  dateCreated: String
  dateModified: String
  license: String
}

input UpdateDataCatalogInput {
  labels: [String!] = []
  name: String

  """A brief description of this Thing."""
  description: String
  url: String

  """Reference to Person who created the work."""
  creator: ID

  """Reference to Person who published the work."""
  publisher: ID
  dateCreated: String
  dateModified: String
  license: String
}

input CreateDatasetInput {
  labels: [String!] = []
  name: String

  """A brief description of this Thing."""
  description: String
  url: String

  """Reference to Person who created the work."""
  creator: ID

  """Reference to Person who published the work."""
  publisher: ID
  dateCreated: String
  dateModified: String
  license: String

  """
  URL to the direct data download. Distinct from the optional "url" field, which should lead to a page about the data.
  """
  distribution: String!

  """
  Media type typically expressed using a MIME format (see IANA site and MDN reference) e.g. application/zip for a SoftwareApplication binary, audio/mpeg for .mp3 etc.).
  """
  encodingFormat: String!
}

input UpdateDatasetInput {
  labels: [String!] = []
  name: String

  """A brief description of this Thing."""
  description: String
  url: String

  """Reference to Person who created the work."""
  creator: ID

  """Reference to Person who published the work."""
  publisher: ID
  dateCreated: String
  dateModified: String
  license: String

  """
  URL to the direct data download. Distinct from the optional "url" field, which should lead to a page about the data.
  """
  distribution: String

  """
  Media type typically expressed using a MIME format (see IANA site and MDN reference) e.g. application/zip for a SoftwareApplication binary, audio/mpeg for .mp3 etc.).
  """
  encodingFormat: String
}

input CreatePersonInput {
  labels: [String!] = []
  name: String

  """A brief description of this Thing."""
  description: String
  url: String

  """
  A callsign, as used in broadcasting and radio communications to identify people, radio and TV stations, or vehicles. Typically correlates with username, when available.
  """
  callSign: String

  """Primary email address"""
  email: String
}

input UpdatePersonInput {
  labels: [String!] = []
  name: String

  """A brief description of this Thing."""
  description: String
  url: String

  """
  A callsign, as used in broadcasting and radio communications to identify people, radio and TV stations, or vehicles. Typically correlates with username, when available.
  """
  callSign: String

  """Primary email address"""
  email: String
}

input CreateNotebookInput {
  labels: [String!] = []
  name: String

  """A brief description of this Thing."""
  description: String
  url: String

  """Reference to Person who created the work."""
  creator: ID

  """Reference to Person who published the work."""
  publisher: ID
  dateCreated: String
  dateModified: String
  license: String

  """
  Link to the repository where the un-compiled, human readable code and related code is located (SVN, github, CodePlex).
  """
  codeRepository: String

  """The computer programming language."""
  programmingLanguage: String

  """
  Runtime platform or script interpreter dependencies (Example - Java v1, Python2.3, .Net Framework 3.0).
  """
  runtimePlatform: String

  """
  The spoken language of the content or performance or used in an action. Please use one of the language codes from the IETF BCP 47 standard. See also availableLanguage. Supersedes language.
  """
  inLanguage: String
}

input UpdateNotebookInput {
  labels: [String!] = []
  name: String

  """A brief description of this Thing."""
  description: String
  url: String

  """Reference to Person who created the work."""
  creator: ID

  """Reference to Person who published the work."""
  publisher: ID
  dateCreated: String
  dateModified: String
  license: String

  """
  Link to the repository where the un-compiled, human readable code and related code is located (SVN, github, CodePlex).
  """
  codeRepository: String

  """The computer programming language."""
  programmingLanguage: String

  """
  Runtime platform or script interpreter dependencies (Example - Java v1, Python2.3, .Net Framework 3.0).
  """
  runtimePlatform: String

  """
  The spoken language of the content or performance or used in an action. Please use one of the language codes from the IETF BCP 47 standard. See also availableLanguage. Supersedes language.
  """
  inLanguage: String
}

input CreateOrganizationInput {
  labels: [String!] = []
  name: String

  """A brief description of this Thing."""
  description: String
  url: String

  """Primary email address"""
  email: String
}

input UpdateOrganizationInput {
  labels: [String!] = []
  name: String

  """A brief description of this Thing."""
  description: String
  url: String

  """Primary email address"""
  email: String
}

input CreateSoftwareApplicationInput {
  labels: [String!] = []
  name: String

  """A brief description of this Thing."""
  description: String
  url: String

  """Reference to Person who created the work."""
  creator: ID

  """Reference to Person who published the work."""
  publisher: ID
  dateCreated: String
  dateModified: String
  license: String

  """Semantic version of the software instance."""
  softwareVersion: String

  """Type of software application, e.g. "Game, Multimedia"."""
  applicationCategory: String

  """If the file can be downloaded, URL to download the binary."""
  downloadUrl: String

  """
  URL at which the app may be installed, if different from the URL of the item.
  """
  installUrl: String

  """Operating systems supported (Windows 7, OSX 10.6, Android 1.6)."""
  operatingSystem: String
}

input UpdateSoftwareApplicationInput {
  labels: [String!] = []
  name: String

  """A brief description of this Thing."""
  description: String
  url: String

  """Reference to Person who created the work."""
  creator: ID

  """Reference to Person who published the work."""
  publisher: ID
  dateCreated: String
  dateModified: String
  license: String

  """Semantic version of the software instance."""
  softwareVersion: String

  """Type of software application, e.g. "Game, Multimedia"."""
  applicationCategory: String

  """If the file can be downloaded, URL to download the binary."""
  downloadUrl: String

  """
  URL at which the app may be installed, if different from the URL of the item.
  """
  installUrl: String

  """Operating systems supported (Windows 7, OSX 10.6, Android 1.6)."""
  operatingSystem: String
}

input CreateSoftwareSourceCodeInput {
  labels: [String!] = []
  name: String

  """A brief description of this Thing."""
  description: String
  url: String

  """Reference to Person who created the work."""
  creator: ID

  """Reference to Person who published the work."""
  publisher: ID
  dateCreated: String
  dateModified: String
  license: String

  """
  Link to the repository where the un-compiled, human readable code and related code is located (SVN, github, CodePlex).
  """
  codeRepository: String

  """The computer programming language."""
  programmingLanguage: String

  """
  Runtime platform or script interpreter dependencies (Example - Java v1, Python2.3, .Net Framework 3.0).
  """
  runtimePlatform: String
}

input UpdateSoftwareSourceCodeInput {
  labels: [String!] = []
  name: String

  """A brief description of this Thing."""
  description: String
  url: String

  """Reference to Person who created the work."""
  creator: ID

  """Reference to Person who published the work."""
  publisher: ID
  dateCreated: String
  dateModified: String
  license: String

  """
  Link to the repository where the un-compiled, human readable code and related code is located (SVN, github, CodePlex).
  """
  codeRepository: String

  """The computer programming language."""
  programmingLanguage: String

  """
  Runtime platform or script interpreter dependencies (Example - Java v1, Python2.3, .Net Framework 3.0).
  """
  runtimePlatform: String
}

input CreateEventInput {
  labels: [String!] = []
  name: String

  """A brief description of this Thing."""
  description: String
  url: String

  """
  The duration of the item (movie, audio recording, event, etc.) in ISO 8601 date format.
  """
  duration: String!

  """The end date and time of the item (in ISO 8601 date format)."""
  endDate: String!

  """The start date and time of the item (in ISO 8601 date format)."""
  startDate: String!

  """
  The location of, for example, where an event is happening, where an organization is located, or where an action takes place.
  """
  location: String!
}

input UpdateEventInput {
  labels: [String!] = []
  name: String

  """A brief description of this Thing."""
  description: String
  url: String

  """
  The duration of the item (movie, audio recording, event, etc.) in ISO 8601 date format.
  """
  duration: String

  """The end date and time of the item (in ISO 8601 date format)."""
  endDate: String

  """The start date and time of the item (in ISO 8601 date format)."""
  startDate: String

  """
  The location of, for example, where an event is happening, where an organization is located, or where an action takes place.
  """
  location: String
}

input CreateCourseInput {
  labels: [String!] = []
  name: String

  """A brief description of this Thing."""
  description: String
  url: String

  """Reference to Person who created the work."""
  creator: ID

  """Reference to Person who published the work."""
  publisher: ID
  dateCreated: String
  dateModified: String
  license: String

  """An award won by or for this LearningResource."""
  award: String

  """
  The LearningResource being described is intended to help a person learn the competency or learning outcome defined by the referenced term.
  """
  teaches: String

  """
  Knowledge, skill, ability or personal attribute that must be demonstrated by a person or other entity in order to do something such as earn an Educational Occupational Credential or understand a LearningResource.
  """
  competencyRequired: [String!] = []

  """
  The identifier for the Course used by the course provider (e.g. CS101 or cypher-101)
  """
  courseCode: String!
}

input UpdateCourseInput {
  labels: [String!] = []
  name: String

  """A brief description of this Thing."""
  description: String
  url: String

  """Reference to Person who created the work."""
  creator: ID

  """Reference to Person who published the work."""
  publisher: ID
  dateCreated: String
  dateModified: String
  license: String

  """An award won by or for this LearningResource."""
  award: String

  """
  The LearningResource being described is intended to help a person learn the competency or learning outcome defined by the referenced term.
  """
  teaches: String

  """
  Knowledge, skill, ability or personal attribute that must be demonstrated by a person or other entity in order to do something such as earn an Educational Occupational Credential or understand a LearningResource.
  """
  competencyRequired: [String!] = []

  """
  The identifier for the Course used by the course provider (e.g. CS101 or cypher-101)
  """
  courseCode: String
}

input CreateBookInput {
  labels: [String!] = []
  name: String

  """A brief description of this Thing."""
  description: String
  url: String

  """Reference to Person who created the work."""
  creator: ID

  """Reference to Person who published the work."""
  publisher: ID
  dateCreated: String
  dateModified: String
  license: String

  """The ISBN of the book"""
  isbn: String!
}

input UpdateBookInput {
  labels: [String!] = []
  name: String

  """A brief description of this Thing."""
  description: String
  url: String

  """Reference to Person who created the work."""
  creator: ID

  """Reference to Person who published the work."""
  publisher: ID
  dateCreated: String
  dateModified: String
  license: String

  """The ISBN of the book"""
  isbn: String
}

input CreateArticleInput {
  labels: [String!] = []
  name: String

  """A brief description of this Thing."""
  description: String
  url: String

  """Reference to Person who created the work."""
  creator: ID

  """Reference to Person who published the work."""
  publisher: ID
  dateCreated: String
  dateModified: String
  license: String
}

input UpdateArticleInput {
  labels: [String!] = []
  name: String

  """A brief description of this Thing."""
  description: String
  url: String

  """Reference to Person who created the work."""
  creator: ID

  """Reference to Person who published the work."""
  publisher: ID
  dateCreated: String
  dateModified: String
  license: String
}

input CreateCommentInput {
  labels: [String!] = []
  name: String

  """A brief description of this Thing."""
  description: String
  url: String

  """Reference to Person who created the work."""
  creator: ID

  """Reference to Person who published the work."""
  publisher: ID
  dateCreated: String
  dateModified: String
  license: String
  text: String

  """
  The number of upvotes this question, answer or comment has received from the community.
  """
  upvoteCount: Int!

  """
  The number of downvotes this question, answer or comment has received from the community.
  """
  downvoteCount: Int!
}

input UpdateCommentInput {
  labels: [String!] = []
  name: String

  """A brief description of this Thing."""
  description: String
  url: String

  """Reference to Person who created the work."""
  creator: ID

  """Reference to Person who published the work."""
  publisher: ID
  dateCreated: String
  dateModified: String
  license: String
  text: String

  """
  The number of upvotes this question, answer or comment has received from the community.
  """
  upvoteCount: Int

  """
  The number of downvotes this question, answer or comment has received from the community.
  """
  downvoteCount: Int
}

input CreateIncludedInDataCatalogInput {
  labels: [String!] = []
  name: String

  """A brief description of this Thing."""
  description: String
  url: String
}

input UpdateIncludedInDataCatalogInput {
  labels: [String!] = []
  name: String

  """A brief description of this Thing."""
  description: String
  url: String
  id: Int!
}

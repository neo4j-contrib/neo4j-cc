/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 * 
 * `npx openapi-typescript https://docs.discourse.org/openapi.json --output libs/data-access/discourse/src/lib/discourse-schema.ts`
 */

export interface paths {
  "/admin/backups.json": {
    get: operations["getBackups"];
    post: operations["createBackup"];
  };
  "/admin/backups/{filename}": {
    get: operations["downloadBackup"];
    put: operations["sendDownloadBackupEmail"];
  };
  "/admin/badges.json": {
    get: operations["adminListBadges"];
    post: operations["createBadge"];
  };
  "/admin/badges/{id}.json": {
    put: operations["updateBadge"];
    delete: operations["deleteBadge"];
  };
  "/categories.json": {
    get: operations["listCategories"];
    post: operations["createCategory"];
  };
  "/categories/{id}.json": {
    put: operations["updateCategory"];
  };
  "/c/{slug}/{id}/none.json": {
    get: operations["listCategoryTopics"];
  };
  "/c/{category}/{subcategory}/{id}.json": {
    get: operations["listSubcategoryTopics"];
  };
  "/c/{id}/show.json": {
    get: operations["getCategory"];
  };
  "/admin/groups.json": {
    post: operations["createGroup"];
  };
  "/admin/groups/{id}.json": {
    delete: operations["deleteGroup"];
  };
  "/groups/{id}.json": {
    get: operations["getGroup"];
    put: operations["updateGroup"];
  };
  "/groups/{id}/members.json": {
    get: operations["listGroupMembers"];
    put: operations["addGroupMembers"];
    delete: operations["removeGroupMembers"];
  };
  "/groups.json": {
    get: operations["listGroups"];
  };
  "/invites.json": {
    post: operations["createInvite"];
  };
  "/notifications.json": {
    get: operations["getNotifications"];
  };
  "/notifications/mark-read.json": {
    put: operations["markNotificationsAsRead"];
  };
  "/posts.json": {
    get: operations["listPosts"];
    post: operations["createTopicPostPM"];
  };
  "/posts/{id}.json": {
    get: operations["getPost"];
    put: operations["updatePost"];
    delete: operations["deletePost"];
  };
  "/posts/{id}/locked.json": {
    put: operations["lockPost"];
  };
  "/post_actions.json": {
    post: operations["performPostAction"];
  };
  "/topics/private-messages/{username}.json": {
    get: operations["listUserPrivateMessages"];
  };
  "/topics/private-messages-sent/{username}.json": {
    get: operations["getUserSentPrivateMessages"];
  };
  "/search.json": {
    get: operations["search"];
  };
  "/site.json": {
    /** Can be used to fetch all categories and subcategories */
    get: operations["getSite"];
  };
  "/tag_groups.json": {
    get: operations["listTagGroups"];
    post: operations["createTagGroup"];
  };
  "/tag_groups/{id}.json": {
    get: operations["getTagGroup"];
    put: operations["updateTagGroup"];
  };
  "/tags.json": {
    get: operations["listTags"];
  };
  "/tag/{name}.json": {
    get: operations["getTag"];
  };
  "/t/{id}/posts.json": {
    get: operations["getSpecificPostsFromTopic"];
  };
  "/t/{id}.json": {
    get: operations["getTopic"];
    delete: operations["removeTopic"];
  };
  "/t/-/{id}.json": {
    put: operations["updateTopic"];
  };
  "/t/{id}/invite.json": {
    post: operations["inviteToTopic"];
  };
  "/t/{id}/bookmark.json": {
    put: operations["bookmarkTopic"];
  };
  "/t/{id}/status.json": {
    put: operations["updateTopicStatus"];
  };
  "/latest.json": {
    get: operations["listLatestTopics"];
  };
  "/top.json": {
    get: operations["listTopTopics"];
  };
  "/t/{id}/notifications.json": {
    post: operations["setNotificationLevel"];
  };
  "/t/{id}/change-timestamp.json": {
    put: operations["updateTopicTimestamp"];
  };
  "/t/{id}/timer.json": {
    post: operations["createTopicTimer"];
  };
  "/uploads.json": {
    post: operations["createUpload"];
  };
  "/uploads/generate-presigned-put.json": {
    /**
     * Direct external uploads bypass the usual method of creating uploads
     * via the POST /uploads route, and upload directly to an external provider,
     * which by default is S3. This route begins the process, and will return
     * a unique identifier for the external upload as well as a presigned URL
     * which is where the file binary blob should be uploaded to.
     *
     * Once the upload is complete to the external service, you must call the
     * POST /complete-external-upload route using the unique identifier returned
     * by this route, which will create any required Upload record in the Discourse
     * database and also move file from its temporary location to the final
     * destination in the external storage service.
     *
     * You must have the correct permissions and CORS settings configured in your
     * external provider. We support AWS S3 as the default. See:
     *
     * https://meta.discourse.org/t/-/210469#s3-multipart-direct-uploads-4.
     *
     * An external file store must be set up and `enable_direct_s3_uploads` must
     * be set to true for this endpoint to function.
     */
    post: operations["generatePresignedPut"];
  };
  "/uploads/complete-external-upload.json": {
    /**
     * Completes an external upload initialized with /get-presigned-put. The
     * file will be moved from its temporary location in external storage to
     * a final destination in the S3 bucket. An Upload record will also be
     * created in the database in most cases.
     *
     * If a sha1-checksum was provided in the initial request it will also
     * be compared with the uploaded file in storage to make sure the same
     * file was uploaded. The file size will be compared for the same reason.
     *
     * You must have the correct permissions and CORS settings configured in your
     * external provider. We support AWS S3 as the default. See:
     *
     * https://meta.discourse.org/t/-/210469#s3-multipart-direct-uploads-4.
     *
     * An external file store must be set up and `enable_direct_s3_uploads` must
     * be set to true for this endpoint to function.
     */
    post: operations["completeExternalUpload"];
  };
  "/uploads/create-multipart.json": {
    /**
     * Creates a multipart upload in the external storage provider, storing
     * a temporary reference to the external upload similar to /get-presigned-put.
     *
     * You must have the correct permissions and CORS settings configured in your
     * external provider. We support AWS S3 as the default. See:
     *
     * https://meta.discourse.org/t/-/210469#s3-multipart-direct-uploads-4.
     *
     * An external file store must be set up and `enable_direct_s3_uploads` must
     * be set to true for this endpoint to function.
     */
    post: operations["createMultipartUpload"];
  };
  "/uploads/batch-presign-multipart-parts.json": {
    /**
     * Multipart uploads are uploaded in chunks or parts to individual presigned
     * URLs, similar to the one genreated by /generate-presigned-put. The part
     * numbers provided must be between 1 and 10000. The total number of parts
     * will depend on the chunk size in bytes that you intend to use to upload
     * each chunk. For example a 12MB file may have 2 5MB chunks and a final
     * 2MB chunk, for part numbers 1, 2, and 3.
     *
     * This endpoint will return a presigned URL for each part number provided,
     * which you can then use to send PUT requests for the binary chunk corresponding
     * to that part. When the part is uploaded, the provider should return an
     * ETag for the part, and this should be stored along with the part number,
     * because this is needed to complete the multipart upload.
     *
     * You must have the correct permissions and CORS settings configured in your
     * external provider. We support AWS S3 as the default. See:
     *
     * https://meta.discourse.org/t/-/210469#s3-multipart-direct-uploads-4.
     *
     * An external file store must be set up and `enable_direct_s3_uploads` must
     * be set to true for this endpoint to function.
     */
    post: operations["batchPresignMultipartParts"];
  };
  "/uploads/abort-multipart.json": {
    /**
     * This endpoint aborts the multipart upload initiated with /create-multipart.
     * This should be used when cancelling the upload. It does not matter if parts
     * were already uploaded into the external storage provider.
     *
     * You must have the correct permissions and CORS settings configured in your
     * external provider. We support AWS S3 as the default. See:
     *
     * https://meta.discourse.org/t/-/210469#s3-multipart-direct-uploads-4.
     *
     * An external file store must be set up and `enable_direct_s3_uploads` must
     * be set to true for this endpoint to function.
     */
    post: operations["abortMultipart"];
  };
  "/uploads/complete-multipart.json": {
    /**
     * Completes the multipart upload in the external store, and copies the
     * file from its temporary location to its final location in the store.
     * All of the parts must have been uploaded to the external storage provider.
     * An Upload record will be completed in most cases once the file is copied
     * to its final location.
     *
     * You must have the correct permissions and CORS settings configured in your
     * external provider. We support AWS S3 as the default. See:
     *
     * https://meta.discourse.org/t/-/210469#s3-multipart-direct-uploads-4.
     *
     * An external file store must be set up and `enable_direct_s3_uploads` must
     * be set to true for this endpoint to function.
     */
    post: operations["completeMultipart"];
  };
  "/user-badges/{username}.json": {
    get: operations["listUserBadges"];
  };
  "/users.json": {
    post: operations["createUser"];
  };
  "/u/{username}.json": {
    get: operations["getUser"];
  };
  "/u/by-external/{external_id}.json": {
    get: operations["getUserExternalId"];
  };
  "/u/by-external/{provider}/{external_id}.json": {
    get: operations["getUserIdentiyProviderExternalId"];
  };
  "/u/{username}/preferences/avatar/pick.json": {
    put: operations["updateAvatar"];
  };
  "/u/{username}/preferences/email.json": {
    put: operations["updateEmail"];
  };
  "/directory_items.json": {
    get: operations["listUsersPublic"];
  };
  "/admin/users/{id}.json": {
    get: operations["adminGetUser"];
    delete: operations["deleteUser"];
  };
  "/admin/users/{id}/suspend.json": {
    put: operations["suspendUser"];
  };
  "/admin/users/{id}/anonymize.json": {
    put: operations["anonymizeUser"];
  };
  "/admin/users/{id}/log_out.json": {
    post: operations["logOutUser"];
  };
  "/user_avatar/{username}/refresh_gravatar.json": {
    post: operations["refreshGravatar"];
  };
  "/admin/users/list/{flag}.json": {
    get: operations["adminListUsers"];
  };
  "/user_actions.json": {
    get: operations["listUserActions"];
  };
  "/session/forgot_password.json": {
    post: operations["sendPasswordResetEmail"];
  };
  "/users/password-reset/{token}.json": {
    put: operations["changePassword"];
  };
  "/u/{username}/emails.json": {
    get: operations["getUserEmails"];
  };
}

export interface components {
  schemas: unknown;
}

export interface operations {
  getBackups: {
    responses: {
      /** success response */
      200: {
        content: {
          "application/json": {
            filename: string;
            size: number;
            last_modified: string;
          }[];
        };
      };
    };
  };
  createBackup: {
    parameters: unknown;
    responses: {
      /** success response */
      200: {
        content: {
          "application/json": {
            /** @example OK */
            success: string;
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          with_uploads: boolean;
        };
      };
    };
  };
  downloadBackup: {
    parameters: {
      path: {
        filename: string;
      };
      query: {
        token: string;
      };
    };
    responses: {
      /** success response */
      200: unknown;
    };
  };
  sendDownloadBackupEmail: {
    parameters: {
      path: {
        filename: string;
      };
    };
    responses: {
      /** success response */
      200: unknown;
    };
  };
  adminListBadges: {
    responses: {
      /** success response */
      200: {
        content: {
          "application/json": {
            badges: [
              {
                id: number;
                name: string;
                description: string;
                grant_count: number;
                allow_title: boolean;
                multiple_grant: boolean;
                icon: string;
                image_url: unknown;
                listable: boolean;
                enabled: boolean;
                badge_grouping_id: number;
                system: boolean;
                long_description: string;
                slug: string;
                manually_grantable: boolean;
                query: unknown;
                trigger: unknown;
                target_posts: boolean;
                auto_revoke: boolean;
                show_posts: boolean;
                i18n_name: string;
                badge_type_id: number;
              }
            ];
            badge_types: [
              {
                id: number;
                name: string;
                sort_order: number;
              }
            ];
            badge_groupings: [
              {
                id: number;
                name: string;
                description: unknown;
                position: number;
                system: boolean;
              }
            ];
            admin_badges: {
              protected_system_fields: [];
              triggers: {
                user_change: number;
                none: number;
                post_revision: number;
                trust_level_change: number;
                post_action: number;
              };
              badge_ids: [];
              badge_grouping_ids: [];
              badge_type_ids: [];
            };
          };
        };
      };
    };
  };
  createBadge: {
    parameters: unknown;
    responses: {
      /** success response */
      200: {
        content: {
          "application/json": {
            badge_types: [
              {
                id: number;
                name: string;
                sort_order: number;
              }
            ];
            badge: {
              id: number;
              name: string;
              description: string;
              grant_count: number;
              allow_title: boolean;
              multiple_grant: boolean;
              icon: string;
              image_url: unknown;
              listable: boolean;
              enabled: boolean;
              badge_grouping_id: number;
              system: boolean;
              long_description: string;
              slug: string;
              manually_grantable: boolean;
              query: unknown;
              trigger: unknown;
              target_posts: boolean;
              auto_revoke: boolean;
              show_posts: boolean;
              badge_type_id: number;
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description The name for the new badge. */
          name: string;
          /**
           * @description The ID for the badge type. 1 for Gold, 2 for Silver,
           * 3 for Bronze.
           */
          badge_type_id: number;
        };
      };
    };
  };
  updateBadge: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** success response */
      200: {
        content: {
          "application/json": {
            badge_types: [
              {
                id: number;
                name: string;
                sort_order: number;
              }
            ];
            badge: {
              id: number;
              name: string;
              description: string;
              grant_count: number;
              allow_title: boolean;
              multiple_grant: boolean;
              icon: string;
              image_url: unknown;
              listable: boolean;
              enabled: boolean;
              badge_grouping_id: number;
              system: boolean;
              long_description: string;
              slug: string;
              manually_grantable: boolean;
              query: unknown;
              trigger: unknown;
              target_posts: boolean;
              auto_revoke: boolean;
              show_posts: boolean;
              badge_type_id: number;
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description The name for the new badge. */
          name: string;
          /**
           * @description The ID for the badge type. 1 for Gold, 2 for Silver,
           * 3 for Bronze.
           */
          badge_type_id: number;
        };
      };
    };
  };
  deleteBadge: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** success response */
      200: unknown;
    };
  };
  listCategories: {
    parameters: {
      query: {
        include_subcategories?: true;
      };
    };
    responses: {
      /** success response */
      200: {
        content: {
          "application/json": {
            category_list: {
              can_create_category: boolean;
              can_create_topic: boolean;
              categories: [
                {
                  id: number;
                  name: string;
                  color: string;
                  text_color: string;
                  slug: string;
                  topic_count: number;
                  post_count: number;
                  position: number;
                  description: string;
                  description_text: string;
                  description_excerpt: string;
                  topic_url: unknown;
                  read_restricted: boolean;
                  permission: number;
                  notification_level: number;
                  can_edit: boolean;
                  topic_template: unknown;
                  has_children: boolean;
                  sort_order: unknown;
                  sort_ascending: unknown;
                  show_subcategory_list: boolean;
                  num_featured_topics: number;
                  default_view: unknown;
                  subcategory_list_style: string;
                  default_top_period: string;
                  default_list_filter: string;
                  minimum_required_tags: number;
                  navigate_to_first_post_after_read: boolean;
                  topics_day: number;
                  topics_week: number;
                  topics_month: number;
                  topics_year: number;
                  topics_all_time: number;
                  is_uncategorized: boolean;
                  subcategory_ids: number[];
                  subcategory_list?: Record<string, unknown>[];
                  uploaded_logo: unknown;
                  uploaded_background: unknown;
                }
              ];
            };
          };
        };
      };
    };
  };
  createCategory: {
    parameters: unknown;
    responses: {
      /** success response */
      200: {
        content: {
          "application/json": {
            category: {
              id: number;
              name: string;
              color: string;
              text_color: string;
              slug: string;
              topic_count: number;
              post_count: number;
              position: number;
              description: unknown;
              description_text: unknown;
              description_excerpt: unknown;
              topic_url: unknown;
              read_restricted: boolean;
              permission: unknown;
              notification_level: number;
              can_edit: boolean;
              topic_template: unknown;
              has_children: unknown;
              sort_order: unknown;
              sort_ascending: unknown;
              show_subcategory_list: boolean;
              num_featured_topics: number;
              default_view: unknown;
              subcategory_list_style: string;
              default_top_period: string;
              default_list_filter: string;
              minimum_required_tags: number;
              navigate_to_first_post_after_read: boolean;
              custom_fields: { [key: string]: unknown };
              min_tags_from_required_group: number;
              allowed_tags?: unknown[];
              allowed_tag_groups?: unknown[];
              allow_global_tags?: boolean;
              required_tag_group_name: unknown;
              read_only_banner: unknown;
              available_groups: [];
              auto_close_hours: unknown;
              auto_close_based_on_last_post: boolean;
              allow_unlimited_owner_edits_on_first_post: boolean;
              default_slow_mode_seconds: unknown;
              group_permissions: [
                {
                  permission_type: number;
                  group_name: string;
                }
              ];
              email_in: unknown;
              email_in_allow_strangers: boolean;
              mailinglist_mirror: boolean;
              all_topics_wiki: boolean;
              can_delete: boolean;
              allow_badges: boolean;
              topic_featured_link_allowed: boolean;
              search_priority: number;
              uploaded_logo: unknown;
              uploaded_background: unknown;
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          name: string;
          /** @example 49d9e9 */
          color?: string;
          /** @example f0fcfd */
          text_color?: string;
        };
      };
    };
  };
  updateCategory: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** success response */
      200: {
        content: {
          "application/json": {
            success: string;
            category: {
              id: number;
              name: string;
              color: string;
              text_color: string;
              slug: string;
              topic_count: number;
              post_count: number;
              position: number;
              description: unknown;
              description_text: unknown;
              description_excerpt: unknown;
              topic_url: unknown;
              read_restricted: boolean;
              permission: unknown;
              notification_level: number;
              can_edit: boolean;
              topic_template: unknown;
              has_children: unknown;
              sort_order: unknown;
              sort_ascending: unknown;
              show_subcategory_list: boolean;
              num_featured_topics: number;
              default_view: unknown;
              subcategory_list_style: string;
              default_top_period: string;
              default_list_filter: string;
              minimum_required_tags: number;
              navigate_to_first_post_after_read: boolean;
              custom_fields: { [key: string]: unknown };
              min_tags_from_required_group: number;
              allowed_tags?: unknown[];
              allowed_tag_groups?: unknown[];
              allow_global_tags?: boolean;
              required_tag_group_name: unknown;
              read_only_banner: unknown;
              available_groups: [];
              auto_close_hours: unknown;
              auto_close_based_on_last_post: boolean;
              allow_unlimited_owner_edits_on_first_post: boolean;
              default_slow_mode_seconds: unknown;
              group_permissions: [
                {
                  permission_type: number;
                  group_name: string;
                }
              ];
              email_in: unknown;
              email_in_allow_strangers: boolean;
              mailinglist_mirror: boolean;
              all_topics_wiki: boolean;
              can_delete: boolean;
              allow_badges: boolean;
              topic_featured_link_allowed: boolean;
              search_priority: number;
              uploaded_logo: unknown;
              uploaded_background: unknown;
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          name: string;
          /** @example 49d9e9 */
          color?: string;
          /** @example f0fcfd */
          text_color?: string;
        };
      };
    };
  };
  listCategoryTopics: {
    parameters: {
      path: {
        slug: string;
        id: number;
      };
      query: {
        order?:
          | "activity"
          ;
        ascending?: "true";
        page?: number;
      };
    };
    responses: {
      /** success response */
      200: {
        content: {
          "application/json": {
            users?: [
              {
                id: number;
                username: string;
                name: string;
                avatar_template: string;
              }
            ];
            primary_groups?: [];
            topic_list: {
              can_create_topic: boolean;
              per_page: number;
              top_tags?: unknown[];
              topics: [
                {
                  id: number;
                  title: string;
                  fancy_title: string;
                  slug: string;
                  posts_count: number;
                  reply_count: number;
                  highest_post_number: number;
                  image_url: unknown;
                  created_at: string;
                  last_posted_at: string;
                  bumped: boolean;
                  bumped_at: string;
                  archetype: string;
                  unseen: boolean;
                  pinned: boolean;
                  unpinned: unknown;
                  excerpt: string;
                  visible: boolean;
                  closed: boolean;
                  archived: boolean;
                  bookmarked: unknown;
                  liked: unknown;
                  views: number;
                  like_count: number;
                  has_summary: boolean;
                  last_poster_username: string;
                  category_id: number;
                  pinned_globally: boolean;
                  featured_link: unknown;
                  posters: [
                    {
                      extras: string;
                      description: string;
                      user_id: number;
                      primary_group_id: unknown;
                    }
                  ];
                }
              ];
            };
          };
        };
      };
    };
  };
  listSubcategoryTopics: {
    parameters: {
      path: {
        category: string;
        subcategory: string;
        id: number;
      };
      query: {
        order?:
          | "activity"
          ;
        ascending?: "true";
        page?: number;
      };
    };
    responses: {
      /** success response */
      200: {
        content: {
          "application/json": {
            users?: [
              {
                id: number;
                username: string;
                name: string;
                avatar_template: string;
              }
            ];
            primary_groups?: [];
            topic_list: {
              can_create_topic: boolean;
              per_page: number;
              top_tags?: unknown[];
              topics: [
                {
                  id: number;
                  title: string;
                  fancy_title: string;
                  slug: string;
                  posts_count: number;
                  reply_count: number;
                  highest_post_number: number;
                  image_url: unknown;
                  created_at: string;
                  last_posted_at: string;
                  bumped: boolean;
                  bumped_at: string;
                  archetype: string;
                  unseen: boolean;
                  pinned: boolean;
                  unpinned: unknown;
                  excerpt: string;
                  visible: boolean;
                  closed: boolean;
                  archived: boolean;
                  bookmarked: unknown;
                  liked: unknown;
                  views: number;
                  like_count: number;
                  has_summary: boolean;
                  last_poster_username: string;
                  category_id: number;
                  pinned_globally: boolean;
                  featured_link: unknown;
                  posters: [
                    {
                      extras: string;
                      description: string;
                      user_id: number;
                      primary_group_id: unknown;
                    }
                  ];
                }
              ];
            };
          };
        };
      };
    };
  };
  getCategory: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** response */
      200: {
        content: {
          "application/json": {
            category: {
              id: number;
              name: string;
              color: string;
              text_color: string;
              slug: string;
              topic_count: number;
              post_count: number;
              position: number;
              description: unknown;
              description_text: unknown;
              description_excerpt: unknown;
              topic_url: unknown;
              read_restricted: boolean;
              permission: unknown;
              notification_level: number;
              can_edit: boolean;
              topic_template: unknown;
              has_children: unknown;
              sort_order: unknown;
              sort_ascending: unknown;
              show_subcategory_list: boolean;
              num_featured_topics: number;
              default_view: unknown;
              subcategory_list_style: string;
              default_top_period: string;
              default_list_filter: string;
              minimum_required_tags: number;
              navigate_to_first_post_after_read: boolean;
              custom_fields: { [key: string]: unknown };
              min_tags_from_required_group: number;
              allowed_tags?: unknown[];
              allowed_tag_groups?: unknown[];
              allow_global_tags?: boolean;
              required_tag_group_name: unknown;
              read_only_banner: unknown;
              available_groups: [];
              auto_close_hours: unknown;
              auto_close_based_on_last_post: boolean;
              allow_unlimited_owner_edits_on_first_post: boolean;
              default_slow_mode_seconds: unknown;
              group_permissions: [
                {
                  permission_type: number;
                  group_name: string;
                }
              ];
              email_in: unknown;
              email_in_allow_strangers: boolean;
              mailinglist_mirror: boolean;
              all_topics_wiki: boolean;
              can_delete: boolean;
              allow_badges: boolean;
              topic_featured_link_allowed: boolean;
              search_priority: number;
              uploaded_logo: unknown;
              uploaded_background: unknown;
            };
          };
        };
      };
    };
  };
  createGroup: {
    parameters: unknown;
    responses: {
      /** group created */
      200: {
        content: {
          "application/json": {
            basic_group: {
              id: number;
              automatic?: boolean;
              name?: string;
              user_count?: number;
              mentionable_level?: number;
              messageable_level?: number;
              visibility_level?: number;
              automatic_membership_email_domains?: unknown;
              automatic_membership_retroactive?: boolean;
              primary_group?: boolean;
              title?: unknown;
              grant_trust_level?: unknown;
              incoming_email?: unknown;
              has_messages?: boolean;
              flair_url?: unknown;
              flair_bg_color?: unknown;
              flair_color?: unknown;
              bio_raw?: unknown;
              bio_cooked?: unknown;
              bio_excerpt?: unknown;
              public_admission?: boolean;
              public_exit?: boolean;
              allow_membership_requests?: boolean;
              full_name?: unknown;
              default_notification_level?: number;
              membership_request_template?: unknown;
              membership_visibility_level?: number;
              can_see_members?: boolean;
              publish_read_state?: boolean;
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          group: {
            name: string;
          };
        };
      };
    };
  };
  deleteGroup: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** response */
      200: {
        content: {
          "application/json": {
            /** @example OK */
            success: string;
          };
        };
      };
    };
  };
  getGroup: {
    parameters: {
      path: {
        /** Use group name instead of id */
        id: string;
      };
    };
    responses: {
      /** success response */
      200: {
        content: {
          "application/json": {
            group: {
              id: number;
              automatic: boolean;
              name: string;
              user_count: number;
              mentionable_level: number;
              messageable_level: number;
              visibility_level: number;
              primary_group: boolean;
              title: unknown;
              grant_trust_level: unknown;
              incoming_email: unknown;
              has_messages: boolean;
              flair_url: unknown;
              flair_bg_color: unknown;
              flair_color: unknown;
              bio_raw: unknown;
              bio_cooked: unknown;
              bio_excerpt: unknown;
              public_admission: boolean;
              public_exit: boolean;
              allow_membership_requests: boolean;
              full_name: unknown;
              default_notification_level: number;
              membership_request_template: unknown;
              is_group_user: boolean;
              members_visibility_level: number;
              can_see_members: boolean;
              can_admin_group: boolean;
              publish_read_state: boolean;
              is_group_owner_display: boolean;
              mentionable: boolean;
              messageable: boolean;
              automatic_membership_email_domains: unknown;
              smtp_updated_at?: unknown;
              smtp_updated_by?: unknown;
              smtp_enabled?: boolean;
              smtp_server: unknown;
              smtp_port: unknown;
              smtp_ssl: unknown;
              imap_enabled?: boolean;
              imap_updated_at?: unknown;
              imap_updated_by?: unknown;
              imap_server: unknown;
              imap_port: unknown;
              imap_ssl: unknown;
              imap_mailbox_name: string;
              imap_mailboxes: [];
              email_username: unknown;
              email_password: unknown;
              imap_last_error: unknown;
              imap_old_emails: unknown;
              imap_new_emails: unknown;
              message_count: number;
              allow_unknown_sender_topic_replies: boolean;
              associated_group_ids?: [];
              watching_category_ids: [];
              tracking_category_ids: [];
              watching_first_post_category_ids: [];
              regular_category_ids: [];
              muted_category_ids: [];
              watching_tags?: [];
              watching_first_post_tags?: [];
              tracking_tags?: [];
              regular_tags?: [];
              muted_tags?: [];
            };
            extras: {
              visible_group_names: [];
            };
          };
        };
      };
    };
  };
  updateGroup: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** success response */
      200: {
        content: {
          "application/json": {
            /** @example OK */
            success?: string;
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          group: {
            name: string;
          };
        };
      };
    };
  };
  listGroupMembers: {
    parameters: {
      path: {
        /** Use group name instead of id */
        id: string;
      };
    };
    responses: {
      /** success response */
      200: {
        content: {
          "application/json": {
            members: [
              {
                id: number;
                username: string;
                name: unknown;
                avatar_template: string;
                title: unknown;
                last_posted_at: string;
                last_seen_at: string;
                added_at: string;
                timezone: string;
              }
            ];
            owners: [
              {
                id: number;
                username: string;
                name: unknown;
                avatar_template: string;
                title: unknown;
                last_posted_at: string;
                last_seen_at: string;
                added_at: string;
                timezone: string;
              }
            ];
            meta: {
              total: number;
              limit: number;
              offset: number;
            };
          };
        };
      };
    };
  };
  addGroupMembers: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** success response */
      200: {
        content: {
          "application/json": {
            success: string;
            usernames: [];
            emails: [];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /**
           * @description comma separated list
           * @example username1,username2
           */
          usernames?: string;
        };
      };
    };
  };
  removeGroupMembers: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** success response */
      200: {
        content: {
          "application/json": {
            success: string;
            usernames: [];
            skipped_usernames: [];
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /**
           * @description comma separated list
           * @example username1,username2
           */
          usernames?: string;
        };
      };
    };
  };
  listGroups: {
    responses: {
      /** response */
      200: {
        content: {
          "application/json": {
            groups: [
              {
                id: number;
                automatic: boolean;
                name: string;
                display_name: string;
                user_count: number;
                mentionable_level: number;
                messageable_level: number;
                visibility_level: number;
                primary_group: boolean;
                title: unknown;
                grant_trust_level: unknown;
                incoming_email: unknown;
                has_messages: boolean;
                flair_url: unknown;
                flair_bg_color: unknown;
                flair_color: unknown;
                bio_raw: unknown;
                bio_cooked: unknown;
                bio_excerpt: unknown;
                public_admission: boolean;
                public_exit: boolean;
                allow_membership_requests: boolean;
                full_name: unknown;
                default_notification_level: number;
                membership_request_template: unknown;
                is_group_user?: boolean;
                is_group_owner?: boolean;
                members_visibility_level: number;
                can_see_members: boolean;
                can_admin_group: boolean;
                publish_read_state: boolean;
              }
            ];
            extras: {
              type_filters: [];
            };
            total_rows_groups: number;
            load_more_groups: string;
          };
        };
      };
    };
  };
  createInvite: {
    parameters: {
      header: {
        "Api-Key": string;
        "Api-Username": string;
      };
    };
    responses: {
      /** success response */
      200: {
        content: {
          "application/json": {
            /** @example 42 */
            id?: number;
            /** @example http://example.com/invites/9045fd767efe201ca60c6658bcf14158 */
            link?: string;
            /** @example not-a-user-yet@example.com */
            email?: string;
            emailed?: boolean;
            /** @example Hello world! */
            custom_message?: unknown;
            /** @example */
            topics?: unknown[];
            /** @example */
            groups?: unknown[];
            /** @example 2021-01-01T12:00:00.000Z */
            created_at?: string;
            /** @example 2021-01-01T12:00:00.000Z */
            updated_at?: string;
            /** @example 2021-02-01T12:00:00.000Z */
            expires_at?: string;
            expired?: boolean;
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /**
           * @description required for email invites only
           * @example not-a-user-yet@example.com
           */
          email?: string;
          skip_email?: boolean;
          /** @description optional, for email invites */
          custom_message?: string;
          /**
           * @description optional, for link invites
           * @default 1
           * @example 5
           */
          max_redemptions_allowed?: number;
          topic_id?: number;
          /** @description optional, either this or `group_names` */
          group_id?: number;
          /** @description optional, either this or `group_id` */
          group_names?: string;
          /**
           * @description optional, if not supplied, the invite_expiry_days site
           * setting is used
           */
          expires_at?: string;
        };
      };
    };
  };
  getNotifications: {
    responses: {
      /** notifications */
      200: {
        content: {
          "application/json": {
            notifications?: {
              id?: number;
              user_id?: number;
              notification_type?: number;
              read?: boolean;
              created_at?: string;
              post_number?: unknown;
              topic_id?: unknown;
              slug?: unknown;
              data?: {
                badge_id?: number;
                badge_name?: string;
                badge_slug?: string;
                badge_title?: boolean;
                username?: string;
              };
            }[];
            total_rows_notifications?: number;
            seen_notification_id?: number;
            load_more_notifications?: string;
          };
        };
      };
    };
  };
  markNotificationsAsRead: {
    parameters: unknown;
    responses: {
      /** notifications marked read */
      200: {
        content: {
          "application/json": {
            success?: string;
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /**
           * @description (optional) Leave off to mark all notifications as
           * read
           */
          id?: number;
        };
      };
    };
  };
  listPosts: {
    parameters: {
      header: {
        "Api-Key": string;
        "Api-Username": string;
      };
    };
    responses: {
      /** latest posts */
      200: {
        content: {
          "application/json": {
            latest_posts?: {
              id?: number;
              name?: string;
              username?: string;
              avatar_template?: string;
              created_at?: string;
              cooked?: string;
              post_number?: number;
              post_type?: number;
              updated_at?: string;
              reply_count?: number;
              reply_to_post_number?: unknown;
              quote_count?: number;
              incoming_link_count?: number;
              reads?: number;
              readers_count?: number;
              score?: number;
              yours?: boolean;
              topic_id?: number;
              topic_slug?: string;
              topic_title?: string;
              topic_html_title?: string;
              category_id?: number;
              display_username?: string;
              primary_group_name?: unknown;
              flair_name?: unknown;
              flair_url?: unknown;
              flair_bg_color?: unknown;
              flair_color?: unknown;
              version?: number;
              can_edit?: boolean;
              can_delete?: boolean;
              can_recover?: boolean;
              can_wiki?: boolean;
              user_title?: unknown;
              raw?: string;
              actions_summary?: {
                id?: number;
                can_act?: boolean;
              }[];
              moderator?: boolean;
              admin?: boolean;
              staff?: boolean;
              user_id?: number;
              hidden?: boolean;
              trust_level?: number;
              deleted_at?: unknown;
              user_deleted?: boolean;
              edit_reason?: unknown;
              can_view_edit_history?: boolean;
              wiki?: boolean;
              reviewable_id?: unknown;
              reviewable_score_count?: number;
              reviewable_score_pending_count?: number;
            }[];
          };
        };
      };
    };
  };
  createTopicPostPM: {
    parameters: unknown;
    responses: {
      /** post created */
      200: {
        content: {
          "application/json": {
            id: number;
            name: unknown;
            username: string;
            avatar_template: string;
            created_at: string;
            raw?: string;
            cooked: string;
            post_number: number;
            post_type: number;
            updated_at: string;
            reply_count: number;
            reply_to_post_number: unknown;
            quote_count: number;
            incoming_link_count: number;
            reads: number;
            readers_count: number;
            score: number;
            yours: boolean;
            topic_id: number;
            topic_slug: string;
            display_username: unknown;
            primary_group_name: unknown;
            flair_name: unknown;
            flair_url: unknown;
            flair_bg_color: unknown;
            flair_color: unknown;
            version: number;
            can_edit: boolean;
            can_delete: boolean;
            can_recover: boolean;
            can_wiki: boolean;
            user_title: unknown;
            bookmarked: boolean;
            actions_summary: [
              {
                id: number;
                can_act: boolean;
              }
            ];
            moderator: boolean;
            admin: boolean;
            staff: boolean;
            user_id: number;
            draft_sequence: number;
            hidden: boolean;
            trust_level: number;
            deleted_at: unknown;
            user_deleted: boolean;
            edit_reason: unknown;
            can_view_edit_history: boolean;
            wiki: boolean;
            reviewable_id: unknown;
            reviewable_score_count: number;
            reviewable_score_pending_count: number;
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description Required if creating a new topic or new private message. */
          title?: string;
          raw: string;
          /** @description Required if creating a new post. */
          topic_id?: number;
          /**
           * @description Optional if creating a new topic, and ignored if creating
           * a new post.
           */
          category?: number;
          /**
           * @description Required for private message, comma separated.
           * @example blake,sam
           */
          target_recipients?: string;
          /**
           * @deprecated
           * @description Deprecated. Use target_recipients instead.
           */
          target_usernames?: string;
          /**
           * @description Required for new private message.
           * @example private_message
           */
          archetype?: string;
          created_at?: string;
          /**
           * @description Provide a URL from a remote system to associate a forum
           * topic with that URL, typically for using Discourse as a comments
           * system for an external blog.
           */
          embed_url?: string;
        };
      };
    };
  };
  getPost: {
    parameters: {
      header: {
        "Api-Key": string;
        "Api-Username": string;
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** latest posts */
      200: {
        content: {
          "application/json": {
            id?: number;
            name?: unknown;
            username?: string;
            avatar_template?: string;
            created_at?: string;
            cooked?: string;
            post_number?: number;
            post_type?: number;
            updated_at?: string;
            reply_count?: number;
            reply_to_post_number?: unknown;
            quote_count?: number;
            incoming_link_count?: number;
            reads?: number;
            readers_count?: number;
            score?: number;
            yours?: boolean;
            topic_id?: number;
            topic_slug?: string;
            display_username?: unknown;
            primary_group_name?: unknown;
            flair_name?: unknown;
            flair_url?: unknown;
            flair_bg_color?: unknown;
            flair_color?: unknown;
            version?: number;
            can_edit?: boolean;
            can_delete?: boolean;
            can_recover?: boolean;
            can_wiki?: boolean;
            user_title?: unknown;
            raw?: string;
            actions_summary?: {
              id?: number;
              can_act?: boolean;
            }[];
            moderator?: boolean;
            admin?: boolean;
            staff?: boolean;
            user_id?: number;
            hidden?: boolean;
            trust_level?: number;
            deleted_at?: unknown;
            user_deleted?: boolean;
            edit_reason?: unknown;
            can_view_edit_history?: boolean;
            wiki?: boolean;
            reviewable_id?: unknown;
            reviewable_score_count?: number;
            reviewable_score_pending_count?: number;
          };
        };
      };
    };
  };
  updatePost: {
    parameters: {
      header: {
        "Api-Key": string;
        "Api-Username": string;
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** post updated */
      200: {
        content: {
          "application/json": {
            post?: {
              id?: number;
              name?: unknown;
              username?: string;
              avatar_template?: string;
              created_at?: string;
              cooked?: string;
              post_number?: number;
              post_type?: number;
              updated_at?: string;
              reply_count?: number;
              reply_to_post_number?: unknown;
              quote_count?: number;
              incoming_link_count?: number;
              reads?: number;
              readers_count?: number;
              score?: number;
              yours?: boolean;
              topic_id?: number;
              topic_slug?: string;
              display_username?: unknown;
              primary_group_name?: unknown;
              flair_url?: unknown;
              flair_bg_color?: unknown;
              flair_color?: unknown;
              version?: number;
              can_edit?: boolean;
              can_delete?: boolean;
              can_recover?: boolean;
              can_wiki?: boolean;
              user_title?: unknown;
              actions_summary?: {
                id?: number;
                can_act?: boolean;
              }[];
              moderator?: boolean;
              admin?: boolean;
              staff?: boolean;
              user_id?: number;
              draft_sequence?: number;
              hidden?: boolean;
              trust_level?: number;
              deleted_at?: unknown;
              user_deleted?: boolean;
              edit_reason?: unknown;
              can_view_edit_history?: boolean;
              wiki?: boolean;
              reviewable_id?: unknown;
              reviewable_score_count?: number;
              reviewable_score_pending_count?: number;
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          post?: {
            raw: string;
            edit_reason?: string;
          };
        };
      };
    };
  };
  deletePost: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** success response */
      200: unknown;
    };
    requestBody: {
      content: {
        "application/json": {
          /**
           * @description The `SiteSetting.can_permanently_delete` needs to be
           * enabled first before this param can be used. Also this endpoint
           * needs to be called first without `force_destroy` and then followed
           * up with a second call 5 minutes later with `force_destroy` to
           * permanently delete.
           * @example true
           */
          force_destroy?: boolean;
        };
      };
    };
  };
  lockPost: {
    parameters: {
      header: {
        "Api-Key": string;
        "Api-Username": string;
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** post updated */
      200: {
        content: {
          "application/json": {
            locked?: boolean;
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          locked: boolean;
        };
      };
    };
  };
  performPostAction: {
    parameters: {
      header: {
        "Api-Key": string;
        "Api-Username": string;
      };
    };
    responses: {
      /** post updated */
      200: {
        content: {
          "application/json": {
            id?: number;
            name?: string;
            username?: string;
            avatar_template?: string;
            created_at?: string;
            cooked?: string;
            post_number?: number;
            post_type?: number;
            updated_at?: string;
            reply_count?: number;
            reply_to_post_number?: unknown;
            quote_count?: number;
            incoming_link_count?: number;
            reads?: number;
            readers_count?: number;
            score?: number;
            yours?: boolean;
            topic_id?: number;
            topic_slug?: string;
            display_username?: string;
            primary_group_name?: unknown;
            flair_name?: unknown;
            flair_url?: unknown;
            flair_bg_color?: unknown;
            flair_color?: unknown;
            version?: number;
            can_edit?: boolean;
            can_delete?: boolean;
            can_recover?: boolean;
            can_wiki?: boolean;
            user_title?: unknown;
            actions_summary?: {
              id?: number;
              count?: number;
              acted?: boolean;
              can_undo?: boolean;
            }[];
            moderator?: boolean;
            admin?: boolean;
            staff?: boolean;
            user_id?: number;
            hidden?: boolean;
            trust_level?: number;
            deleted_at?: unknown;
            user_deleted?: boolean;
            edit_reason?: unknown;
            can_view_edit_history?: boolean;
            wiki?: boolean;
            notice?: { [key: string]: unknown };
            reviewable_id?: unknown;
            reviewable_score_count?: number;
            reviewable_score_pending_count?: number;
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          id: number;
          post_action_type_id: number;
          flag_topic?: boolean;
        };
      };
    };
  };
  listUserPrivateMessages: {
    parameters: {
      path: {
        username: string;
      };
    };
    responses: {
      /** private messages */
      200: {
        content: {
          "application/json": {
            users?: {
              id?: number;
              username?: string;
              name?: string;
              avatar_template?: string;
            }[];
            primary_groups?: unknown[];
            topic_list?: {
              can_create_topic?: boolean;
              draft?: unknown;
              draft_key?: string;
              draft_sequence?: number;
              per_page?: number;
              topics?: {
                id?: number;
                title?: string;
                fancy_title?: string;
                slug?: string;
                posts_count?: number;
                reply_count?: number;
                highest_post_number?: number;
                image_url?: unknown;
                created_at?: string;
                last_posted_at?: string;
                bumped?: boolean;
                bumped_at?: string;
                archetype?: string;
                unseen?: boolean;
                last_read_post_number?: number;
                unread_posts?: number;
                pinned?: boolean;
                unpinned?: unknown;
                visible?: boolean;
                closed?: boolean;
                archived?: boolean;
                notification_level?: number;
                bookmarked?: boolean;
                liked?: boolean;
                views?: number;
                like_count?: number;
                has_summary?: boolean;
                last_poster_username?: string;
                category_id?: unknown;
                pinned_globally?: boolean;
                featured_link?: unknown;
                allowed_user_count?: number;
                posters?: {
                  extras?: string;
                  description?: string;
                  user_id?: number;
                  primary_group_id?: unknown;
                }[];
                participants?: {
                  extras?: string;
                  description?: unknown;
                  user_id?: number;
                  primary_group_id?: unknown;
                }[];
              }[];
            };
          };
        };
      };
    };
  };
  getUserSentPrivateMessages: {
    parameters: {
      path: {
        username: string;
      };
    };
    responses: {
      /** private messages */
      200: {
        content: {
          "application/json": {
            users?: {
              id?: number;
              username?: string;
              name?: unknown;
              avatar_template?: string;
            }[];
            primary_groups?: unknown[];
            topic_list?: {
              can_create_topic?: boolean;
              draft?: unknown;
              draft_key?: string;
              draft_sequence?: number;
              per_page?: number;
              topics?: {
                id?: number;
                title?: string;
                fancy_title?: string;
                slug?: string;
                posts_count?: number;
                reply_count?: number;
                highest_post_number?: number;
                image_url?: unknown;
                created_at?: string;
                last_posted_at?: string;
                bumped?: boolean;
                bumped_at?: string;
                archetype?: string;
                unseen?: boolean;
                last_read_post_number?: number;
                unread_posts?: number;
                pinned?: boolean;
                unpinned?: unknown;
                visible?: boolean;
                closed?: boolean;
                archived?: boolean;
                notification_level?: number;
                bookmarked?: boolean;
                liked?: boolean;
                views?: number;
                like_count?: number;
                has_summary?: boolean;
                last_poster_username?: string;
                category_id?: unknown;
                pinned_globally?: boolean;
                featured_link?: unknown;
                allowed_user_count?: number;
                posters?: {
                  extras?: string;
                  description?: string;
                  user_id?: number;
                  primary_group_id?: unknown;
                }[];
                participants?: unknown[];
              }[];
            };
          };
        };
      };
    };
  };
  search: {
    parameters: {
      query: {
        /**
         * The query string needs to be url encoded and is made up of the following options:
         * - Search term. This is just a string. Usually it would be the first item in the query.
         * - `@<username>`: Use the `@` followed by the username to specify posts by this user.
         * - `#<category>`: Use the `#` followed by the category slug to search within this category.
         * - `tags:`: `api,solved` or for posts that have all the specified tags `api+solved`.
         * - `before:`: `yyyy-mm-dd`
         * - `after:`: `yyyy-mm-dd`
         * - `order:`: `latest`, `likes`, `views`, `latest_topic`
         * - `assigned:`: username (without `@`)
         * - `in:`: `title`, `likes`, `personal`, `seen`, `unseen`, `posted`, `created`, `watching`, `tracking`, `bookmarks`, `assigned`, `unassigned`, `first`, `pinned`, `wiki`
         * - `with:`: `images`
         * - `status:`: `open`, `closed`, `public`, `archived`, `noreplies`, `single_user`, `solved`, `unsolved`
         * - `min_posts:`: 1
         * - `max_posts:`: 10
         * - `min_views:`: 1
         * - `max_views:`: 10
         *
         * If you are using cURL you can use the `-G` and the `--data-urlencode` flags to encode the query:
         *
         * ```
         * curl -i -sS -X GET -G "http://localhost:4200/search.json" \
         * --data-urlencode 'q=wordpress @scossar #fun after:2020-01-01'
         * ```
         */
        q?: string;
        page?: number;
      };
    };
    responses: {
      /** success response */
      200: {
        content: {
          "application/json": {
            posts: [];
            users: [];
            categories: [];
            tags: [];
            groups: [];
            grouped_search_result: {
              more_posts: unknown;
              more_users: unknown;
              more_categories: unknown;
              term: string;
              search_log_id: number;
              more_full_page_results: unknown;
              can_create_topic: boolean;
              error: unknown;
              post_ids: [];
              user_ids: [];
              category_ids: [];
              tag_ids: [];
              group_ids: [];
            };
          };
        };
      };
    };
  };
  /** Can be used to fetch all categories and subcategories */
  getSite: {
    responses: {
      /** success response */
      200: {
        content: {
          "application/json": {
            default_archetype: string;
            notification_types: {
              mentioned: number;
              replied: number;
              quoted: number;
              edited: number;
              liked: number;
              private_message: number;
              invited_to_private_message: number;
              invitee_accepted: number;
              posted: number;
              moved_post: number;
              linked: number;
              granted_badge: number;
              invited_to_topic: number;
              custom: number;
              group_mentioned: number;
              group_message_summary: number;
              watching_first_post: number;
              topic_reminder: number;
              liked_consolidated: number;
              post_approved: number;
              code_review_commit_approved: number;
              membership_request_accepted: number;
              membership_request_consolidated: number;
              bookmark_reminder: number;
              reaction: number;
              votes_released: number;
              event_reminder: number;
              event_invitation: number;
              chat_mention: number;
              chat_message?: number;
              chat_invitation?: number;
            };
            post_types: {
              regular: number;
              moderator_action: number;
              small_action: number;
              whisper: number;
            };
            trust_levels: {
              newuser: number;
              basic: number;
              member: number;
              regular: number;
              leader: number;
            };
            groups: [
              {
                id: number;
                name: string;
                flair_url: unknown;
                flair_bg_color: unknown;
                flair_color: unknown;
              }
            ];
            filters: [];
            periods: [];
            top_menu_items: [];
            anonymous_top_menu_items: [];
            uncategorized_category_id: number;
            user_field_max_length: number;
            post_action_types: [
              {
                id: number;
                name_key: string;
                name: string;
                description: string;
                short_description: string;
                is_flag: boolean;
                is_custom_flag: boolean;
              }
            ];
            topic_flag_types: [
              {
                id: number;
                name_key: string;
                name: string;
                description: string;
                short_description: string;
                is_flag: boolean;
                is_custom_flag: boolean;
              }
            ];
            can_create_tag: boolean;
            can_tag_topics: boolean;
            can_tag_pms: boolean;
            tags_filter_regexp: string;
            top_tags: [];
            wizard_required?: boolean;
            can_associate_groups?: boolean;
            topic_featured_link_allowed_category_ids: [];
            user_themes: [
              {
                theme_id: number;
                name: string;
                default: boolean;
                color_scheme_id: unknown;
              }
            ];
            user_color_schemes: [
              {
                id: number;
                name: string;
                is_dark: boolean;
              }
            ];
            default_dark_color_scheme: unknown;
            censored_regexp: unknown;
            custom_emoji_translation: { [key: string]: unknown };
            watched_words_replace: unknown;
            watched_words_link: unknown;
            categories: [
              {
                id: number;
                name: string;
                color: string;
                text_color: string;
                slug: string;
                topic_count: number;
                post_count: number;
                position: number;
                description: string;
                description_text: string;
                description_excerpt: string;
                topic_url: string;
                read_restricted: boolean;
                permission: number;
                notification_level: number;
                topic_template: unknown;
                has_children: boolean;
                sort_order: unknown;
                sort_ascending: unknown;
                show_subcategory_list: boolean;
                num_featured_topics: number;
                default_view: unknown;
                subcategory_list_style: string;
                default_top_period: string;
                default_list_filter: string;
                minimum_required_tags: number;
                navigate_to_first_post_after_read: boolean;
                allowed_tags: [];
                allowed_tag_groups: [];
                allow_global_tags: boolean;
                min_tags_from_required_group: number;
                required_tag_group_name: unknown;
                read_only_banner: unknown;
                uploaded_logo: unknown;
                uploaded_background: unknown;
                can_edit: boolean;
              }
            ];
            archetypes: [
              {
                id: string;
                name: string;
                options: [];
              }
            ];
            user_fields: [];
            auth_providers: [];
          };
        };
      };
    };
  };
  listTagGroups: {
    responses: {
      /** tags */
      200: {
        content: {
          "application/json": {
            tag_groups?: {
              id?: number;
              name?: string;
              tag_names?: unknown[];
              parent_tag_name?: unknown[];
              one_per_topic?: boolean;
              permissions?: {
                staff?: number;
              };
            }[];
          };
        };
      };
    };
  };
  createTagGroup: {
    parameters: unknown;
    responses: {
      /** tag group created */
      200: {
        content: {
          "application/json": {
            tag_group: {
              id: number;
              name: string;
              tag_names: [];
              parent_tag_name: [];
              one_per_topic: boolean;
              permissions: { [key: string]: unknown };
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          name: string;
        };
      };
    };
  };
  getTagGroup: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** notifications */
      200: {
        content: {
          "application/json": {
            tag_group?: {
              id?: number;
              name?: string;
              tag_names?: unknown[];
              parent_tag_name?: unknown[];
              one_per_topic?: boolean;
              permissions?: {
                everyone?: number;
              };
            };
          };
        };
      };
    };
  };
  updateTagGroup: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** Tag group updated */
      200: {
        content: {
          "application/json": {
            success?: string;
            tag_group?: {
              id?: number;
              name?: string;
              tag_names?: unknown[];
              parent_tag_name?: unknown[];
              one_per_topic?: boolean;
              permissions?: {
                everyone?: number;
              };
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          name?: string;
        };
      };
    };
  };
  listTags: {
    responses: {
      /** notifications */
      200: {
        content: {
          "application/json": {
            tags?: {
              id?: string;
              text?: string;
              count?: number;
              pm_count?: number;
              target_tag?: unknown;
            }[];
            extras?: {
              categories?: unknown[];
            };
          };
        };
      };
    };
  };
  getTag: {
    parameters: {
      path: {
        name: string;
      };
    };
    responses: {
      /** notifications */
      200: {
        content: {
          "application/json": {
            users?: {
              id?: number;
              username?: string;
              name?: unknown;
              avatar_template?: string;
            }[];
            primary_groups?: unknown[];
            topic_list?: {
              can_create_topic?: boolean;
              draft?: unknown;
              draft_key?: string;
              draft_sequence?: number;
              per_page?: number;
              tags?: {
                id?: number;
                name?: string;
                topic_count?: number;
                staff?: boolean;
              }[];
              topics?: {
                id?: number;
                title?: string;
                fancy_title?: string;
                slug?: string;
                posts_count?: number;
                reply_count?: number;
                highest_post_number?: number;
                image_url?: unknown;
                created_at?: string;
                last_posted_at?: string;
                bumped?: boolean;
                bumped_at?: string;
                archetype?: string;
                unseen?: boolean;
                last_read_post_number?: number;
                unread_posts?: number;
                pinned?: boolean;
                unpinned?: unknown;
                visible?: boolean;
                closed?: boolean;
                archived?: boolean;
                notification_level?: number;
                bookmarked?: boolean;
                liked?: boolean;
                tags?: unknown[];
                views?: number;
                like_count?: number;
                has_summary?: boolean;
                last_poster_username?: string;
                category_id?: number;
                pinned_globally?: boolean;
                featured_link?: unknown;
                posters?: {
                  extras?: string;
                  description?: string;
                  user_id?: number;
                  primary_group_id?: unknown;
                }[];
              }[];
            };
          };
        };
      };
    };
  };
  getSpecificPostsFromTopic: {
    parameters: {
      header: {
        "Api-Key": string;
        "Api-Username": string;
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** specific posts */
      200: {
        content: {
          "application/json": {
            post_stream?: {
              posts?: {
                id?: number;
                name?: unknown;
                username?: string;
                avatar_template?: string;
                created_at?: string;
                cooked?: string;
                post_number?: number;
                post_type?: number;
                updated_at?: string;
                reply_count?: number;
                reply_to_post_number?: unknown;
                quote_count?: number;
                incoming_link_count?: number;
                reads?: number;
                readers_count?: number;
                score?: number;
                yours?: boolean;
                topic_id?: number;
                topic_slug?: string;
                display_username?: unknown;
                primary_group_name?: unknown;
                flair_name?: unknown;
                flair_url?: unknown;
                flair_bg_color?: unknown;
                flair_color?: unknown;
                version?: number;
                can_edit?: boolean;
                can_delete?: boolean;
                can_recover?: boolean;
                can_wiki?: boolean;
                read?: boolean;
                user_title?: unknown;
                actions_summary?: {
                  id?: number;
                  can_act?: boolean;
                }[];
                moderator?: boolean;
                admin?: boolean;
                staff?: boolean;
                user_id?: number;
                hidden?: boolean;
                trust_level?: number;
                deleted_at?: unknown;
                user_deleted?: boolean;
                edit_reason?: unknown;
                can_view_edit_history?: boolean;
                wiki?: boolean;
                reviewable_id?: number;
                reviewable_score_count?: number;
                reviewable_score_pending_count?: number;
              }[];
            };
            id?: number;
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          "post_ids[]": number;
        };
      };
    };
  };
  getTopic: {
    parameters: {
      header: {
        "Api-Key": string;
        "Api-Username": string;
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** specific posts */
      200: {
        content: {
          "application/json": {
            post_stream?: {
              posts?: {
                id?: number;
                name?: string;
                username?: string;
                avatar_template?: string;
                created_at?: string;
                cooked?: string;
                post_number?: number;
                post_type?: number;
                updated_at?: string;
                reply_count?: number;
                reply_to_post_number?: unknown;
                quote_count?: number;
                incoming_link_count?: number;
                reads?: number;
                readers_count?: number;
                score?: number;
                yours?: boolean;
                topic_id?: number;
                topic_slug?: string;
                display_username?: string;
                primary_group_name?: unknown;
                flair_name?: unknown;
                flair_url?: unknown;
                flair_bg_color?: unknown;
                flair_color?: unknown;
                version?: number;
                can_edit?: boolean;
                can_delete?: boolean;
                can_recover?: boolean;
                can_wiki?: boolean;
                link_counts?: {
                  url?: string;
                  internal?: boolean;
                  reflection?: boolean;
                  clicks?: number;
                }[];
                read?: boolean;
                user_title?: unknown;
                actions_summary?: {
                  id?: number;
                  can_act?: boolean;
                }[];
                moderator?: boolean;
                admin?: boolean;
                staff?: boolean;
                user_id?: number;
                hidden?: boolean;
                trust_level?: number;
                deleted_at?: unknown;
                user_deleted?: boolean;
                edit_reason?: unknown;
                can_view_edit_history?: boolean;
                wiki?: boolean;
                reviewable_id?: number;
                reviewable_score_count?: number;
                reviewable_score_pending_count?: number;
              }[];
              stream?: unknown[];
            };
            timeline_lookup?: unknown[];
            suggested_topics?: {
              id?: number;
              title?: string;
              fancy_title?: string;
              slug?: string;
              posts_count?: number;
              reply_count?: number;
              highest_post_number?: number;
              image_url?: unknown;
              created_at?: string;
              last_posted_at?: unknown;
              bumped?: boolean;
              bumped_at?: string;
              archetype?: string;
              unseen?: boolean;
              last_read_post_number?: number;
              unread_posts?: number;
              pinned?: boolean;
              unpinned?: boolean;
              visible?: boolean;
              closed?: boolean;
              archived?: boolean;
              notification_level?: number;
              bookmarked?: boolean;
              liked?: boolean;
              like_count?: number;
              views?: number;
              category_id?: number;
              featured_link?: unknown;
              posters?: {
                extras?: unknown;
                description?: string;
                user?: {
                  id?: number;
                  username?: string;
                  name?: string;
                  avatar_template?: string;
                };
              }[];
            }[];
            id?: number;
            title?: string;
            fancy_title?: string;
            posts_count?: number;
            created_at?: string;
            views?: number;
            reply_count?: number;
            like_count?: number;
            last_posted_at?: unknown;
            visible?: boolean;
            closed?: boolean;
            archived?: boolean;
            has_summary?: boolean;
            archetype?: string;
            slug?: string;
            category_id?: number;
            word_count?: unknown;
            deleted_at?: unknown;
            user_id?: number;
            featured_link?: unknown;
            pinned_globally?: boolean;
            pinned_at?: unknown;
            pinned_until?: unknown;
            image_url?: unknown;
            draft?: unknown;
            draft_key?: string;
            draft_sequence?: number;
            unpinned?: unknown;
            pinned?: boolean;
            current_post_number?: number;
            highest_post_number?: unknown;
            deleted_by?: unknown;
            has_deleted?: boolean;
            actions_summary?: {
              id?: number;
              count?: number;
              hidden?: boolean;
              can_act?: boolean;
            }[];
            chunk_size?: number;
            bookmarked?: boolean;
            topic_timer?: unknown;
            message_bus_last_id?: number;
            participant_count?: number;
            show_read_indicator?: boolean;
            thumbnails?: unknown;
            details?: {
              notification_level?: number;
              can_move_posts?: boolean;
              can_edit?: boolean;
              can_delete?: boolean;
              can_remove_allowed_users?: boolean;
              can_create_post?: boolean;
              can_reply_as_new_topic?: boolean;
              can_flag_topic?: boolean;
              can_convert_topic?: boolean;
              can_review_topic?: boolean;
              can_remove_self_id?: number;
              participants?: {
                id?: number;
                username?: string;
                name?: string;
                avatar_template?: string;
                post_count?: number;
                primary_group_name?: unknown;
                flair_name?: unknown;
                flair_url?: unknown;
                flair_color?: unknown;
                flair_bg_color?: unknown;
              }[];
              created_by?: {
                id?: number;
                username?: string;
                name?: string;
                avatar_template?: string;
              };
              last_poster?: {
                id?: number;
                username?: string;
                name?: string;
                avatar_template?: string;
              };
            };
          };
        };
      };
    };
  };
  removeTopic: {
    parameters: {
      header: {
        "Api-Key": string;
        "Api-Username": string;
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** specific posts */
      200: unknown;
    };
  };
  updateTopic: {
    parameters: {
      header: {
        "Api-Key": string;
        "Api-Username": string;
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** topic updated */
      200: {
        content: {
          "application/json": {
            basic_topic?: {
              id?: number;
              title?: string;
              fancy_title?: string;
              slug?: string;
              posts_count?: number;
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          topic?: {
            title?: string;
            category_id?: number;
          };
        };
      };
    };
  };
  inviteToTopic: {
    parameters: {
      header: {
        "Api-Key": string;
        "Api-Username": string;
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** topic updated */
      200: {
        content: {
          "application/json": {
            user?: {
              id?: number;
              username?: string;
              name?: string;
              avatar_template?: string;
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          user?: string;
          email?: string;
        };
      };
    };
  };
  bookmarkTopic: {
    parameters: {
      header: {
        "Api-Key": string;
        "Api-Username": string;
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** topic updated */
      200: unknown;
    };
  };
  updateTopicStatus: {
    parameters: {
      header: {
        "Api-Key": string;
        "Api-Username": string;
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** topic updated */
      200: {
        content: {
          "application/json": {
            /** @example OK */
            success?: string;
            topic_status_update?: unknown;
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @enum {string} */
          status:
            | "closed"
            | "pinned"
            | "pinned_globally"
            | "archived"
            | "visible";
          /** @enum {string} */
          enabled: "true" | "false";
          /**
           * @description Only required for `pinned` and `pinned_globally`
           * @example 2030-12-31
           */
          until?: string;
        };
      };
    };
  };
  listLatestTopics: {
    parameters: {
      header: {
        "Api-Key": string;
        "Api-Username": string;
      };
      query: {
        /**
         * Enum: `default`, `created`, `activity`, `views`, `posts`, `category`,
         * `likes`, `op_likes`, `posters`
         */
        order?: string;
        /** Defaults to `desc`, add `ascending=true` to sort asc */
        ascending?: string;
      };
    };
    responses: {
      /** topic updated */
      200: {
        content: {
          "application/json": {
            users?: {
              id?: number;
              username?: string;
              name?: unknown;
              avatar_template?: string;
            }[];
            primary_groups?: unknown[];
            topic_list?: {
              can_create_topic?: boolean;
              draft?: unknown;
              draft_key?: string;
              draft_sequence?: number;
              per_page?: number;
              topics?: {
                id?: number;
                title?: string;
                fancy_title?: string;
                slug?: string;
                posts_count?: number;
                reply_count?: number;
                highest_post_number?: number;
                image_url?: string;
                created_at?: string;
                last_posted_at?: string;
                bumped?: boolean;
                bumped_at?: string;
                archetype?: string;
                unseen?: boolean;
                last_read_post_number?: number;
                unread_posts?: number;
                pinned?: boolean;
                unpinned?: unknown;
                visible?: boolean;
                closed?: boolean;
                archived?: boolean;
                notification_level?: number;
                bookmarked?: boolean;
                liked?: boolean;
                views?: number;
                like_count?: number;
                has_summary?: boolean;
                last_poster_username?: string;
                category_id?: number;
                op_like_count?: number;
                pinned_globally?: boolean;
                featured_link?: unknown;
                posters?: {
                  extras?: string;
                  description?: string;
                  user_id?: number;
                  primary_group_id?: unknown;
                }[];
              }[];
            };
          };
        };
      };
    };
  };
  listTopTopics: {
    parameters: {
      header: {
        "Api-Key": string;
        "Api-Username": string;
      };
      query: {
        /** Enum: `all`, `yearly`, `quarterly`, `monthly`, `weekly`, `daily` */
        period?: string;
      };
    };
    responses: {
      /** response */
      200: {
        content: {
          "application/json": {
            users?: {
              id?: number;
              username?: string;
              name?: string;
              avatar_template?: string;
            }[];
            primary_groups?: unknown[];
            topic_list?: {
              can_create_topic?: boolean;
              draft?: unknown;
              draft_key?: string;
              draft_sequence?: number;
              for_period?: string;
              per_page?: number;
              topics?: {
                id?: number;
                title?: string;
                fancy_title?: string;
                slug?: string;
                posts_count?: number;
                reply_count?: number;
                highest_post_number?: number;
                image_url?: unknown;
                created_at?: string;
                last_posted_at?: string;
                bumped?: boolean;
                bumped_at?: string;
                archetype?: string;
                unseen?: boolean;
                last_read_post_number?: number;
                unread_posts?: number;
                pinned?: boolean;
                unpinned?: boolean;
                visible?: boolean;
                closed?: boolean;
                archived?: boolean;
                notification_level?: number;
                bookmarked?: boolean;
                liked?: boolean;
                views?: number;
                like_count?: number;
                has_summary?: boolean;
                last_poster_username?: string;
                category_id?: number;
                op_like_count?: number;
                pinned_globally?: boolean;
                featured_link?: unknown;
                posters?: {
                  extras?: unknown;
                  description?: string;
                  user_id?: number;
                  primary_group_id?: unknown;
                }[];
              }[];
            };
          };
        };
      };
    };
  };
  setNotificationLevel: {
    parameters: {
      header: {
        "Api-Key": string;
        "Api-Username": string;
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** topic updated */
      200: {
        content: {
          "application/json": {
            /** @example OK */
            success?: string;
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @enum {string} */
          notification_level: "0" | "1" | "2" | "3";
        };
      };
    };
  };
  updateTopicTimestamp: {
    parameters: {
      header: {
        "Api-Key": string;
        "Api-Username": string;
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** topic updated */
      200: {
        content: {
          "application/json": {
            /** @example OK */
            success?: string;
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @example 1594291380 */
          timestamp: string;
        };
      };
    };
  };
  createTopicTimer: {
    parameters: {
      header: {
        "Api-Key": string;
        "Api-Username": string;
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** topic updated */
      200: {
        content: {
          "application/json": {
            /** @example OK */
            success?: string;
            execute_at?: string;
            duration?: unknown;
            based_on_last_post?: boolean;
            closed?: boolean;
            category_id?: unknown;
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          time?: string;
          status_type?: string;
          based_on_last_post?: boolean;
          category_id?: number;
        };
      };
    };
  };
  createUpload: {
    parameters: unknown;
    responses: {
      /** file uploaded */
      200: {
        content: {
          "application/json": {
            id: number;
            url: string;
            original_filename: string;
            filesize: number;
            width: number;
            height: number;
            thumbnail_width: number;
            thumbnail_height: number;
            extension: string;
            short_url: string;
            short_path: string;
            retain_hours: unknown;
            human_filesize: string;
          };
        };
      };
    };
    requestBody: {
      content: {
        "multipart/form-data": {
          /** @enum {string} */
          type:
            | "avatar"
            | "profile_background"
            | "card_background"
            | "custom_emoji"
            | "composer";
          /** @description required if uploading an avatar */
          user_id?: number;
          /** @description Use this flag to return an id and url */
          synchronous?: boolean;
          /** Format: binary */
          file?: string;
        };
      };
    };
  };
  /**
   * Direct external uploads bypass the usual method of creating uploads
   * via the POST /uploads route, and upload directly to an external provider,
   * which by default is S3. This route begins the process, and will return
   * a unique identifier for the external upload as well as a presigned URL
   * which is where the file binary blob should be uploaded to.
   *
   * Once the upload is complete to the external service, you must call the
   * POST /complete-external-upload route using the unique identifier returned
   * by this route, which will create any required Upload record in the Discourse
   * database and also move file from its temporary location to the final
   * destination in the external storage service.
   *
   * You must have the correct permissions and CORS settings configured in your
   * external provider. We support AWS S3 as the default. See:
   *
   * https://meta.discourse.org/t/-/210469#s3-multipart-direct-uploads-4.
   *
   * An external file store must be set up and `enable_direct_s3_uploads` must
   * be set to true for this endpoint to function.
   */
  generatePresignedPut: {
    parameters: unknown;
    responses: {
      /** external upload initialized */
      200: {
        content: {
          "application/json": {
            /**
             * @description The path of the temporary file on the external storage
             * service.
             * @example temp/site/uploads/default/12345/67890.jpg
             */
            key?: string;
            /**
             * @description A presigned PUT URL which must be used to upload
             * the file binary blob to.
             * @example https://file-uploads.s3.us-west-2.amazonaws.com/temp/site/uploads/default/123/456.jpg?x-amz-acl=private&x-amz-meta-sha1-checksum=sha1&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AAAAus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20211221T011246Z&X-Amz-Expires=600&X-Amz-SignedHeaders=host&X-Amz-Signature=12345678
             */
            url?: string;
            /**
             * @description A unique string that identifies the external upload.
             * This must be stored and then sent in the /complete-external-upload
             * endpoint to complete the direct upload.
             * @example 66e86218-80d9-4bda-b4d5-2b6def968705
             */
            unique_identifier?: string;
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @enum {string} */
          type:
            | "avatar"
            | "profile_background"
            | "card_background"
            | "custom_emoji"
            | "composer";
          /** @example IMG_2021.jpeg */
          file_name: string;
          /**
           * @description File size should be represented in bytes.
           * @example 4096
           */
          file_size: number;
          metadata?: {
            /**
             * @description The SHA1 checksum of the upload binary blob. Optionally
             * be provided and serves as an additional security check when
             * later processing the file in complete-external-upload endpoint.
             */
            "sha1-checksum"?: string;
          };
        };
      };
    };
  };
  /**
   * Completes an external upload initialized with /get-presigned-put. The
   * file will be moved from its temporary location in external storage to
   * a final destination in the S3 bucket. An Upload record will also be
   * created in the database in most cases.
   *
   * If a sha1-checksum was provided in the initial request it will also
   * be compared with the uploaded file in storage to make sure the same
   * file was uploaded. The file size will be compared for the same reason.
   *
   * You must have the correct permissions and CORS settings configured in your
   * external provider. We support AWS S3 as the default. See:
   *
   * https://meta.discourse.org/t/-/210469#s3-multipart-direct-uploads-4.
   *
   * An external file store must be set up and `enable_direct_s3_uploads` must
   * be set to true for this endpoint to function.
   */
  completeExternalUpload: {
    parameters: unknown;
    responses: {
      /** external upload initialized */
      200: {
        content: {
          "application/json": {
            id: number;
            url: string;
            original_filename: string;
            filesize: number;
            width: number;
            height: number;
            thumbnail_width: number;
            thumbnail_height: number;
            extension: string;
            short_url: string;
            short_path: string;
            retain_hours: unknown;
            human_filesize: string;
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /**
           * @description The unique identifier returned in the original /generate-presigned-put
           * request.
           * @example 66e86218-80d9-4bda-b4d5-2b6def968705
           */
          unique_identifier: string;
          /**
           * @description Optionally set this to true if the upload is for a
           * private message.
           * @example true
           */
          for_private_message?: string;
          /**
           * @description Optionally set this to true if the upload is for a
           * site setting.
           * @example true
           */
          for_site_setting?: string;
          /**
           * @description Optionally set this to true if the upload was pasted
           * into the upload area. This will convert PNG files to JPEG.
           * @example true
           */
          pasted?: string;
        };
      };
    };
  };
  /**
   * Creates a multipart upload in the external storage provider, storing
   * a temporary reference to the external upload similar to /get-presigned-put.
   *
   * You must have the correct permissions and CORS settings configured in your
   * external provider. We support AWS S3 as the default. See:
   *
   * https://meta.discourse.org/t/-/210469#s3-multipart-direct-uploads-4.
   *
   * An external file store must be set up and `enable_direct_s3_uploads` must
   * be set to true for this endpoint to function.
   */
  createMultipartUpload: {
    parameters: unknown;
    responses: {
      /** external upload initialized */
      200: {
        content: {
          "application/json": {
            /**
             * @description The path of the temporary file on the external storage
             * service.
             * @example temp/site/uploads/default/12345/67890.jpg
             */
            key: string;
            /**
             * @description The identifier of the multipart upload in the external
             * storage provider. This is the multipart upload_id in AWS S3.
             * @example 84x83tmxy398t3y._Q_z8CoJYVr69bE6D7f8J6Oo0434QquLFoYdGVerWFx9X5HDEI_TP_95c34n853495x35345394.d.ghQ
             */
            external_upload_identifier: string;
            /**
             * @description A unique string that identifies the external upload.
             * This must be stored and then sent in the /complete-multipart
             * and /batch-presign-multipart-parts endpoints.
             * @example 66e86218-80d9-4bda-b4d5-2b6def968705
             */
            unique_identifier: string;
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @enum {string} */
          upload_type:
            | "avatar"
            | "profile_background"
            | "card_background"
            | "custom_emoji"
            | "composer";
          /** @example IMG_2021.jpeg */
          file_name: string;
          /**
           * @description File size should be represented in bytes.
           * @example 4096
           */
          file_size: number;
          metadata?: {
            /**
             * @description The SHA1 checksum of the upload binary blob. Optionally
             * be provided and serves as an additional security check when
             * later processing the file in complete-external-upload endpoint.
             */
            "sha1-checksum"?: string;
          };
        };
      };
    };
  };
  /**
   * Multipart uploads are uploaded in chunks or parts to individual presigned
   * URLs, similar to the one genreated by /generate-presigned-put. The part
   * numbers provided must be between 1 and 10000. The total number of parts
   * will depend on the chunk size in bytes that you intend to use to upload
   * each chunk. For example a 12MB file may have 2 5MB chunks and a final
   * 2MB chunk, for part numbers 1, 2, and 3.
   *
   * This endpoint will return a presigned URL for each part number provided,
   * which you can then use to send PUT requests for the binary chunk corresponding
   * to that part. When the part is uploaded, the provider should return an
   * ETag for the part, and this should be stored along with the part number,
   * because this is needed to complete the multipart upload.
   *
   * You must have the correct permissions and CORS settings configured in your
   * external provider. We support AWS S3 as the default. See:
   *
   * https://meta.discourse.org/t/-/210469#s3-multipart-direct-uploads-4.
   *
   * An external file store must be set up and `enable_direct_s3_uploads` must
   * be set to true for this endpoint to function.
   */
  batchPresignMultipartParts: {
    parameters: unknown;
    responses: {
      /** external upload initialized */
      200: {
        content: {
          "application/json": {
            /**
             * @description The presigned URLs for each part number, which has
             * the part numbers as keys.
             * @example [object Object]
             */
            presigned_urls: { [key: string]: unknown };
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /**
           * @description The part numbers to generate the presigned URLs for,
           * must be between 1 and 10000.
           * @example 1,2,3
           */
          part_numbers: unknown[];
          /**
           * @description The unique identifier returned in the original /create-multipart
           * request.
           * @example 66e86218-80d9-4bda-b4d5-2b6def968705
           */
          unique_identifier: string;
        };
      };
    };
  };
  /**
   * This endpoint aborts the multipart upload initiated with /create-multipart.
   * This should be used when cancelling the upload. It does not matter if parts
   * were already uploaded into the external storage provider.
   *
   * You must have the correct permissions and CORS settings configured in your
   * external provider. We support AWS S3 as the default. See:
   *
   * https://meta.discourse.org/t/-/210469#s3-multipart-direct-uploads-4.
   *
   * An external file store must be set up and `enable_direct_s3_uploads` must
   * be set to true for this endpoint to function.
   */
  abortMultipart: {
    parameters: unknown;
    responses: {
      /** external upload initialized */
      200: {
        content: {
          "application/json": {
            /** @example OK */
            success: string;
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /**
           * @description The identifier of the multipart upload in the external
           * storage provider. This is the multipart upload_id in AWS S3.
           * @example 84x83tmxy398t3y._Q_z8CoJYVr69bE6D7f8J6Oo0434QquLFoYdGVerWFx9X5HDEI_TP_95c34n853495x35345394.d.ghQ
           */
          external_upload_identifier: string;
        };
      };
    };
  };
  /**
   * Completes the multipart upload in the external store, and copies the
   * file from its temporary location to its final location in the store.
   * All of the parts must have been uploaded to the external storage provider.
   * An Upload record will be completed in most cases once the file is copied
   * to its final location.
   *
   * You must have the correct permissions and CORS settings configured in your
   * external provider. We support AWS S3 as the default. See:
   *
   * https://meta.discourse.org/t/-/210469#s3-multipart-direct-uploads-4.
   *
   * An external file store must be set up and `enable_direct_s3_uploads` must
   * be set to true for this endpoint to function.
   */
  completeMultipart: {
    parameters: unknown;
    responses: {
      /** external upload initialized */
      200: {
        content: {
          "application/json": {
            id: number;
            url: string;
            original_filename: string;
            filesize: number;
            width: number;
            height: number;
            thumbnail_width: number;
            thumbnail_height: number;
            extension: string;
            short_url: string;
            short_path: string;
            retain_hours: unknown;
            human_filesize: string;
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /**
           * @description The unique identifier returned in the original /create-multipart
           * request.
           * @example 66e86218-80d9-4bda-b4d5-2b6def968705
           */
          unique_identifier: string;
          /**
           * @description All of the part numbers and their corresponding ETags
           * that have been uploaded must be provided.
           * @example [object Object],[object Object]
           */
          parts: unknown[];
        };
      };
    };
  };
  listUserBadges: {
    parameters: {
      path: {
        username: string;
      };
    };
    responses: {
      /** success response */
      200: {
        content: {
          "application/json": {
            badges?: [
              {
                id: number;
                name: string;
                description: string;
                grant_count: number;
                allow_title: boolean;
                multiple_grant: boolean;
                icon: string;
                image_url: unknown;
                listable: boolean;
                enabled: boolean;
                badge_grouping_id: number;
                system: boolean;
                slug: string;
                manually_grantable: boolean;
                badge_type_id: number;
              }
            ];
            badge_types?: [
              {
                id: number;
                name: string;
                sort_order: number;
              }
            ];
            granted_bies?: [
              {
                id: number;
                username: string;
                name: string;
                avatar_template: string;
                flair_name: unknown;
                admin: boolean;
                moderator: boolean;
                trust_level: number;
              }
            ];
            user_badges: [
              {
                id: number;
                granted_at: string;
                grouping_position: number;
                is_favorite: unknown;
                can_favorite: boolean;
                badge_id: number;
                granted_by_id: number;
              }
            ];
          };
        };
      };
    };
  };
  createUser: {
    parameters: {
      header: {
        "Api-Key": string;
        "Api-Username": string;
      };
    };
    responses: {
      /** user created */
      200: {
        content: {
          "application/json": {
            success: boolean;
            active: boolean;
            message: string;
            user_id?: number;
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          name: string;
          email: string;
          password: string;
          username: string;
          active?: boolean;
          approved?: boolean;
          "user_fields[1]"?: boolean;
        };
      };
    };
  };
  getUser: {
    parameters: {
      header: {
        "Api-Key": string;
        "Api-Username": string;
      };
      path: {
        username: string;
      };
    };
    responses: {
      /** user response */
      200: {
        content: {
          "application/json": {
            user_badges: [];
            user: {
              id: number;
              username: string;
              name: string;
              avatar_template: string;
              last_posted_at: unknown;
              last_seen_at: unknown;
              created_at: string;
              ignored: boolean;
              muted: boolean;
              can_ignore_user: boolean;
              can_mute_user: boolean;
              can_send_private_messages: boolean;
              can_send_private_message_to_user: boolean;
              trust_level: number;
              moderator: boolean;
              admin: boolean;
              title: unknown;
              badge_count: number;
              second_factor_backup_enabled?: boolean;
              user_fields?: {
                "1": unknown;
                "2": unknown;
              };
              custom_fields: {
                first_name?: unknown;
              };
              time_read: number;
              recent_time_read: number;
              primary_group_id: unknown;
              primary_group_name: unknown;
              flair_group_id: unknown;
              flair_name: unknown;
              flair_url: unknown;
              flair_bg_color: unknown;
              flair_color: unknown;
              featured_topic: unknown;
              staged: boolean;
              can_edit: boolean;
              can_edit_username: boolean;
              can_edit_email: boolean;
              can_edit_name: boolean;
              uploaded_avatar_id: unknown;
              has_title_badges: boolean;
              pending_count: number;
              pending_posts_count?: number;
              profile_view_count: number;
              second_factor_enabled: boolean;
              can_upload_profile_header: boolean;
              can_upload_user_card_background: boolean;
              post_count: number;
              can_be_deleted: boolean;
              can_delete_all_posts: boolean;
              locale: unknown;
              muted_category_ids: [];
              regular_category_ids: [];
              watched_tags: [];
              watching_first_post_tags: [];
              tracked_tags: [];
              muted_tags: [];
              tracked_category_ids: [];
              watched_category_ids: [];
              watched_first_post_category_ids: [];
              system_avatar_upload_id: unknown;
              system_avatar_template: string;
              muted_usernames: [];
              ignored_usernames: [];
              allowed_pm_usernames: [];
              mailing_list_posts_per_day: number;
              can_change_bio: boolean;
              can_change_location: boolean;
              can_change_website: boolean;
              can_change_tracking_preferences: boolean;
              user_api_keys: unknown;
              user_auth_tokens: [
                {
                  id: number;
                  client_ip: string;
                  location: string;
                  browser: string;
                  device: string;
                  os: string;
                  icon: string;
                  created_at: string;
                  seen_at: string;
                  is_active: boolean;
                }
              ];
              user_notification_schedule: {
                enabled: boolean;
                day_0_start_time: number;
                day_0_end_time: number;
                day_1_start_time: number;
                day_1_end_time: number;
                day_2_start_time: number;
                day_2_end_time: number;
                day_3_start_time: number;
                day_3_end_time: number;
                day_4_start_time: number;
                day_4_end_time: number;
                day_5_start_time: number;
                day_5_end_time: number;
                day_6_start_time: number;
                day_6_end_time: number;
              };
              use_logo_small_as_avatar: boolean;
              featured_user_badge_ids: [];
              invited_by: unknown;
              groups: [
                {
                  id: number;
                  automatic: boolean;
                  name: string;
                  display_name: string;
                  user_count: number;
                  mentionable_level: number;
                  messageable_level: number;
                  visibility_level: number;
                  primary_group: boolean;
                  title: unknown;
                  grant_trust_level: unknown;
                  incoming_email: unknown;
                  has_messages: boolean;
                  flair_url: unknown;
                  flair_bg_color: unknown;
                  flair_color: unknown;
                  bio_raw: unknown;
                  bio_cooked: unknown;
                  bio_excerpt: unknown;
                  public_admission: boolean;
                  public_exit: boolean;
                  allow_membership_requests: boolean;
                  full_name: unknown;
                  default_notification_level: number;
                  membership_request_template: unknown;
                  members_visibility_level: number;
                  can_see_members: boolean;
                  can_admin_group: boolean;
                  publish_read_state: boolean;
                }
              ];
              group_users: [
                {
                  group_id: number;
                  user_id: number;
                  notification_level: number;
                  owner?: boolean;
                }
              ];
              user_option: {
                user_id: number;
                mailing_list_mode: boolean;
                mailing_list_mode_frequency: number;
                email_digests: boolean;
                email_level: number;
                email_messages_level: number;
                external_links_in_new_tab: boolean;
                color_scheme_id: unknown;
                dark_scheme_id: unknown;
                dynamic_favicon: boolean;
                enable_quoting: boolean;
                enable_defer: boolean;
                digest_after_minutes: number;
                automatically_unpin_topics: boolean;
                auto_track_topics_after_msecs: number;
                notification_level_when_replying: number;
                new_topic_duration_minutes: number;
                email_previous_replies: number;
                email_in_reply_to: boolean;
                like_notification_frequency: number;
                include_tl0_in_digests: boolean;
                theme_ids: [];
                theme_key_seq: number;
                allow_private_messages: boolean;
                enable_allowed_pm_users: boolean;
                homepage_id: unknown;
                hide_profile_and_presence: boolean;
                text_size: string;
                text_size_seq: number;
                title_count_mode: string;
                timezone: unknown;
                skip_new_user_tips: boolean;
                default_calendar?: string;
                oldest_search_log_date?: unknown;
              };
            };
          };
        };
      };
    };
  };
  getUserExternalId: {
    parameters: {
      header: {
        "Api-Key": string;
        "Api-Username": string;
      };
      path: {
        external_id: string;
      };
    };
    responses: {
      /** user response */
      200: {
        content: {
          "application/json": {
            user_badges: [];
            user: {
              id: number;
              username: string;
              name: string;
              avatar_template: string;
              last_posted_at: unknown;
              last_seen_at: unknown;
              created_at: string;
              ignored: boolean;
              muted: boolean;
              can_ignore_user: boolean;
              can_mute_user: boolean;
              can_send_private_messages: boolean;
              can_send_private_message_to_user: boolean;
              trust_level: number;
              moderator: boolean;
              admin: boolean;
              title: unknown;
              badge_count: number;
              second_factor_backup_enabled?: boolean;
              user_fields?: {
                "1": unknown;
                "2": unknown;
              };
              custom_fields: {
                first_name?: unknown;
              };
              time_read: number;
              recent_time_read: number;
              primary_group_id: unknown;
              primary_group_name: unknown;
              flair_group_id: unknown;
              flair_name: unknown;
              flair_url: unknown;
              flair_bg_color: unknown;
              flair_color: unknown;
              featured_topic: unknown;
              staged: boolean;
              can_edit: boolean;
              can_edit_username: boolean;
              can_edit_email: boolean;
              can_edit_name: boolean;
              uploaded_avatar_id: unknown;
              has_title_badges: boolean;
              pending_count: number;
              pending_posts_count?: number;
              profile_view_count: number;
              second_factor_enabled: boolean;
              can_upload_profile_header: boolean;
              can_upload_user_card_background: boolean;
              post_count: number;
              can_be_deleted: boolean;
              can_delete_all_posts: boolean;
              locale: unknown;
              muted_category_ids: [];
              regular_category_ids: [];
              watched_tags: [];
              watching_first_post_tags: [];
              tracked_tags: [];
              muted_tags: [];
              tracked_category_ids: [];
              watched_category_ids: [];
              watched_first_post_category_ids: [];
              system_avatar_upload_id: unknown;
              system_avatar_template: string;
              muted_usernames: [];
              ignored_usernames: [];
              allowed_pm_usernames: [];
              mailing_list_posts_per_day: number;
              can_change_bio: boolean;
              can_change_location: boolean;
              can_change_website: boolean;
              can_change_tracking_preferences: boolean;
              user_api_keys: unknown;
              user_auth_tokens: [
                {
                  id: number;
                  client_ip: string;
                  location: string;
                  browser: string;
                  device: string;
                  os: string;
                  icon: string;
                  created_at: string;
                  seen_at: string;
                  is_active: boolean;
                }
              ];
              user_notification_schedule: {
                enabled: boolean;
                day_0_start_time: number;
                day_0_end_time: number;
                day_1_start_time: number;
                day_1_end_time: number;
                day_2_start_time: number;
                day_2_end_time: number;
                day_3_start_time: number;
                day_3_end_time: number;
                day_4_start_time: number;
                day_4_end_time: number;
                day_5_start_time: number;
                day_5_end_time: number;
                day_6_start_time: number;
                day_6_end_time: number;
              };
              use_logo_small_as_avatar: boolean;
              featured_user_badge_ids: [];
              invited_by: unknown;
              groups: [
                {
                  id: number;
                  automatic: boolean;
                  name: string;
                  display_name: string;
                  user_count: number;
                  mentionable_level: number;
                  messageable_level: number;
                  visibility_level: number;
                  primary_group: boolean;
                  title: unknown;
                  grant_trust_level: unknown;
                  incoming_email: unknown;
                  has_messages: boolean;
                  flair_url: unknown;
                  flair_bg_color: unknown;
                  flair_color: unknown;
                  bio_raw: unknown;
                  bio_cooked: unknown;
                  bio_excerpt: unknown;
                  public_admission: boolean;
                  public_exit: boolean;
                  allow_membership_requests: boolean;
                  full_name: unknown;
                  default_notification_level: number;
                  membership_request_template: unknown;
                  members_visibility_level: number;
                  can_see_members: boolean;
                  can_admin_group: boolean;
                  publish_read_state: boolean;
                }
              ];
              group_users: [
                {
                  group_id: number;
                  user_id: number;
                  notification_level: number;
                  owner?: boolean;
                }
              ];
              user_option: {
                user_id: number;
                mailing_list_mode: boolean;
                mailing_list_mode_frequency: number;
                email_digests: boolean;
                email_level: number;
                email_messages_level: number;
                external_links_in_new_tab: boolean;
                color_scheme_id: unknown;
                dark_scheme_id: unknown;
                dynamic_favicon: boolean;
                enable_quoting: boolean;
                enable_defer: boolean;
                digest_after_minutes: number;
                automatically_unpin_topics: boolean;
                auto_track_topics_after_msecs: number;
                notification_level_when_replying: number;
                new_topic_duration_minutes: number;
                email_previous_replies: number;
                email_in_reply_to: boolean;
                like_notification_frequency: number;
                include_tl0_in_digests: boolean;
                theme_ids: [];
                theme_key_seq: number;
                allow_private_messages: boolean;
                enable_allowed_pm_users: boolean;
                homepage_id: unknown;
                hide_profile_and_presence: boolean;
                text_size: string;
                text_size_seq: number;
                title_count_mode: string;
                timezone: unknown;
                skip_new_user_tips: boolean;
                default_calendar?: string;
                oldest_search_log_date?: unknown;
              };
            };
          };
        };
      };
    };
  };
  getUserIdentiyProviderExternalId: {
    parameters: {
      header: {
        "Api-Key": string;
        "Api-Username": string;
      };
      path: {
        /**
         * Authentication provider name. Can be found in the provider callback
         * URL: `/auth/{provider}/callback`
         */
        provider: string;
        external_id: string;
      };
    };
    responses: {
      /** user response */
      200: {
        content: {
          "application/json": {
            user_badges: [];
            user: {
              id: number;
              username: string;
              name: string;
              avatar_template: string;
              last_posted_at: unknown;
              last_seen_at: unknown;
              created_at: string;
              ignored: boolean;
              muted: boolean;
              can_ignore_user: boolean;
              can_mute_user: boolean;
              can_send_private_messages: boolean;
              can_send_private_message_to_user: boolean;
              trust_level: number;
              moderator: boolean;
              admin: boolean;
              title: unknown;
              badge_count: number;
              second_factor_backup_enabled?: boolean;
              user_fields?: {
                "1": unknown;
                "2": unknown;
              };
              custom_fields: {
                first_name?: unknown;
              };
              time_read: number;
              recent_time_read: number;
              primary_group_id: unknown;
              primary_group_name: unknown;
              flair_group_id: unknown;
              flair_name: unknown;
              flair_url: unknown;
              flair_bg_color: unknown;
              flair_color: unknown;
              featured_topic: unknown;
              staged: boolean;
              can_edit: boolean;
              can_edit_username: boolean;
              can_edit_email: boolean;
              can_edit_name: boolean;
              uploaded_avatar_id: unknown;
              has_title_badges: boolean;
              pending_count: number;
              pending_posts_count?: number;
              profile_view_count: number;
              second_factor_enabled: boolean;
              can_upload_profile_header: boolean;
              can_upload_user_card_background: boolean;
              post_count: number;
              can_be_deleted: boolean;
              can_delete_all_posts: boolean;
              locale: unknown;
              muted_category_ids: [];
              regular_category_ids: [];
              watched_tags: [];
              watching_first_post_tags: [];
              tracked_tags: [];
              muted_tags: [];
              tracked_category_ids: [];
              watched_category_ids: [];
              watched_first_post_category_ids: [];
              system_avatar_upload_id: unknown;
              system_avatar_template: string;
              muted_usernames: [];
              ignored_usernames: [];
              allowed_pm_usernames: [];
              mailing_list_posts_per_day: number;
              can_change_bio: boolean;
              can_change_location: boolean;
              can_change_website: boolean;
              can_change_tracking_preferences: boolean;
              user_api_keys: unknown;
              user_auth_tokens: [
                {
                  id: number;
                  client_ip: string;
                  location: string;
                  browser: string;
                  device: string;
                  os: string;
                  icon: string;
                  created_at: string;
                  seen_at: string;
                  is_active: boolean;
                }
              ];
              user_notification_schedule: {
                enabled: boolean;
                day_0_start_time: number;
                day_0_end_time: number;
                day_1_start_time: number;
                day_1_end_time: number;
                day_2_start_time: number;
                day_2_end_time: number;
                day_3_start_time: number;
                day_3_end_time: number;
                day_4_start_time: number;
                day_4_end_time: number;
                day_5_start_time: number;
                day_5_end_time: number;
                day_6_start_time: number;
                day_6_end_time: number;
              };
              use_logo_small_as_avatar: boolean;
              featured_user_badge_ids: [];
              invited_by: unknown;
              groups: [
                {
                  id: number;
                  automatic: boolean;
                  name: string;
                  display_name: string;
                  user_count: number;
                  mentionable_level: number;
                  messageable_level: number;
                  visibility_level: number;
                  primary_group: boolean;
                  title: unknown;
                  grant_trust_level: unknown;
                  incoming_email: unknown;
                  has_messages: boolean;
                  flair_url: unknown;
                  flair_bg_color: unknown;
                  flair_color: unknown;
                  bio_raw: unknown;
                  bio_cooked: unknown;
                  bio_excerpt: unknown;
                  public_admission: boolean;
                  public_exit: boolean;
                  allow_membership_requests: boolean;
                  full_name: unknown;
                  default_notification_level: number;
                  membership_request_template: unknown;
                  members_visibility_level: number;
                  can_see_members: boolean;
                  can_admin_group: boolean;
                  publish_read_state: boolean;
                }
              ];
              group_users: [
                {
                  group_id: number;
                  user_id: number;
                  notification_level: number;
                  owner?: boolean;
                }
              ];
              user_option: {
                user_id: number;
                mailing_list_mode: boolean;
                mailing_list_mode_frequency: number;
                email_digests: boolean;
                email_level: number;
                email_messages_level: number;
                external_links_in_new_tab: boolean;
                color_scheme_id: unknown;
                dark_scheme_id: unknown;
                dynamic_favicon: boolean;
                enable_quoting: boolean;
                enable_defer: boolean;
                digest_after_minutes: number;
                automatically_unpin_topics: boolean;
                auto_track_topics_after_msecs: number;
                notification_level_when_replying: number;
                new_topic_duration_minutes: number;
                email_previous_replies: number;
                email_in_reply_to: boolean;
                like_notification_frequency: number;
                include_tl0_in_digests: boolean;
                theme_ids: [];
                theme_key_seq: number;
                allow_private_messages: boolean;
                enable_allowed_pm_users: boolean;
                homepage_id: unknown;
                hide_profile_and_presence: boolean;
                text_size: string;
                text_size_seq: number;
                title_count_mode: string;
                timezone: unknown;
                skip_new_user_tips: boolean;
                default_calendar?: string;
                oldest_search_log_date?: unknown;
              };
            };
          };
        };
      };
    };
  };
  updateAvatar: {
    parameters: {
      path: {
        username: string;
      };
    };
    responses: {
      /** avatar updated */
      200: {
        content: {
          "application/json": {
            /** @example OK */
            success: string;
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          upload_id: number;
          /** @enum {string} */
          type: "uploaded" | "custom" | "gravatar" | "system";
        };
      };
    };
  };
  updateEmail: {
    parameters: {
      path: {
        username: string;
      };
    };
    responses: {
      /** email updated */
      200: unknown;
    };
    requestBody: {
      content: {
        "application/json": {
          /** Format: email */
          email: string;
        };
      };
    };
  };
  listUsersPublic: {
    parameters: {
      query: {
        period: "daily" | "weekly" | "monthly" | "quarterly" | "yearly" | "all";
        order:
          | "likes_received"
          | "likes_given"
          | "topic_count"
          | "post_count"
          | "topics_entered"
          | "posts_read"
          | "days_visited";
        asc?: "true";
        page?: number;
      };
    };
    responses: {
      /** directory items response */
      200: {
        content: {
          "application/json": {
            directory_items: [
              {
                id: number;
                likes_received: number;
                likes_given: number;
                topics_entered: number;
                topic_count: number;
                post_count: number;
                posts_read: number;
                days_visited: number;
                user: {
                  id: number;
                  username: string;
                  name: unknown;
                  avatar_template: string;
                  title: unknown;
                };
              }
            ];
            meta: {
              last_updated_at: unknown;
              total_rows_directory_items: number;
              load_more_directory_items: string;
            };
          };
        };
      };
    };
  };
  adminGetUser: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** response */
      200: {
        content: {
          "application/json": {
            id: number;
            username: string;
            name: unknown;
            avatar_template: string;
            active: boolean;
            admin: boolean;
            moderator: boolean;
            last_seen_at: unknown;
            last_emailed_at: unknown;
            created_at: string;
            last_seen_age: unknown;
            last_emailed_age: unknown;
            created_at_age: unknown;
            trust_level: number;
            manual_locked_trust_level: unknown;
            flag_level: number;
            title: unknown;
            time_read: number;
            staged: boolean;
            days_visited: number;
            posts_read_count: number;
            topics_entered: number;
            post_count: number;
            associated_accounts?: [];
            can_send_activation_email: boolean;
            can_activate: boolean;
            can_deactivate: boolean;
            ip_address: string;
            registration_ip_address: unknown;
            can_grant_admin: boolean;
            can_revoke_admin: boolean;
            can_grant_moderation: boolean;
            can_revoke_moderation: boolean;
            can_impersonate: boolean;
            like_count: number;
            like_given_count: number;
            topic_count: number;
            flags_given_count: number;
            flags_received_count: number;
            private_topics_count: number;
            can_delete_all_posts: boolean;
            can_be_deleted: boolean;
            can_be_anonymized: boolean;
            can_be_merged: boolean;
            full_suspend_reason: unknown;
            silence_reason: unknown;
            post_edits_count?: unknown;
            primary_group_id: unknown;
            badge_count: number;
            warnings_received_count: number;
            bounce_score: unknown;
            reset_bounce_score_after: unknown;
            can_view_action_logs: boolean;
            can_disable_second_factor: boolean;
            can_delete_sso_record: boolean;
            api_key_count: number;
            single_sign_on_record: unknown;
            approved_by: {
              id: number;
              username: string;
              name: string;
              avatar_template: string;
            };
            suspended_by: unknown;
            silenced_by: unknown;
            penalty_counts?: {
              silenced: number;
              suspended: number;
            };
            next_penalty?: string;
            tl3_requirements?: {
              time_period: number;
              requirements_met: boolean;
              requirements_lost: boolean;
              trust_level_locked: boolean;
              on_grace_period: boolean;
              days_visited: number;
              min_days_visited: number;
              num_topics_replied_to: number;
              min_topics_replied_to: number;
              topics_viewed: number;
              min_topics_viewed: number;
              posts_read: number;
              min_posts_read: number;
              topics_viewed_all_time: number;
              min_topics_viewed_all_time: number;
              posts_read_all_time: number;
              min_posts_read_all_time: number;
              num_flagged_posts: number;
              max_flagged_posts: number;
              num_flagged_by_users: number;
              max_flagged_by_users: number;
              num_likes_given: number;
              min_likes_given: number;
              num_likes_received: number;
              min_likes_received: number;
              num_likes_received_days: number;
              min_likes_received_days: number;
              num_likes_received_users: number;
              min_likes_received_users: number;
              penalty_counts: {
                silenced: number;
                suspended: number;
                total: number;
              };
            };
            groups: [
              {
                id: number;
                automatic: boolean;
                name: string;
                display_name: string;
                user_count: number;
                mentionable_level: number;
                messageable_level: number;
                visibility_level: number;
                primary_group: boolean;
                title: unknown;
                grant_trust_level: unknown;
                incoming_email: unknown;
                has_messages: boolean;
                flair_url: unknown;
                flair_bg_color: unknown;
                flair_color: unknown;
                bio_raw: unknown;
                bio_cooked: unknown;
                bio_excerpt: unknown;
                public_admission: boolean;
                public_exit: boolean;
                allow_membership_requests: boolean;
                full_name: unknown;
                default_notification_level: number;
                membership_request_template: unknown;
                members_visibility_level: number;
                can_see_members: boolean;
                can_admin_group: boolean;
                publish_read_state: boolean;
              }
            ];
          };
        };
      };
    };
  };
  deleteUser: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** response */
      200: {
        content: {
          "application/json": {
            deleted: boolean;
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          delete_posts?: boolean;
          block_email?: boolean;
          block_urls?: boolean;
          block_ip?: boolean;
        };
      };
    };
  };
  suspendUser: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** response */
      200: {
        content: {
          "application/json": {
            suspension: {
              suspend_reason: string;
              full_suspend_reason: string;
              suspended_till: string;
              suspended_at: string;
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @example 2121-02-22 */
          suspend_until: string;
          reason: string;
          /** @description Will send an email with this message when present */
          message?: string;
          /** @example delete */
          post_action?: string;
        };
      };
    };
  };
  anonymizeUser: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** response */
      200: {
        content: {
          "application/json": {
            success: string;
            username: string;
          };
        };
      };
    };
  };
  logOutUser: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** response */
      200: {
        content: {
          "application/json": {
            /** @example OK */
            success: string;
          };
        };
      };
    };
  };
  refreshGravatar: {
    parameters: {
      path: {
        username: string;
      };
    };
    responses: {
      /** response */
      200: {
        content: {
          "application/json": {
            gravatar_upload_id: unknown;
            gravatar_avatar_template: unknown;
          };
        };
      };
    };
  };
  adminListUsers: {
    parameters: {
      path: {
        flag: "active" | "new" | "staff" | "suspended" | "blocked" | "suspect";
      };
      query: {
        order?:
          | "created"
          | "last_emailed"
          | "seen"
          | "username"
          | "email"
          | "trust_level"
          | "days_visited"
          | "posts_read"
          | "topics_viewed"
          | "posts"
          | "read_time";
        asc?: "true";
        page?: number;
        show_emails?: boolean;
      };
    };
    responses: {
      /** response */
      200: {
        content: {
          "application/json": {
            id: number;
            username: string;
            name: unknown;
            avatar_template: string;
            email?: string;
            secondary_emails?: [];
            active: boolean;
            admin: boolean;
            moderator: boolean;
            last_seen_at: unknown;
            last_emailed_at: unknown;
            created_at: string;
            last_seen_age: unknown;
            last_emailed_age: unknown;
            created_at_age: unknown;
            trust_level: number;
            manual_locked_trust_level: unknown;
            flag_level: number;
            title: unknown;
            time_read: number;
            staged: boolean;
            days_visited: number;
            posts_read_count: number;
            topics_entered: number;
            post_count: number;
          }[];
        };
      };
    };
  };
  listUserActions: {
    parameters: {
      query: {
        offset: number;
        username: string;
        filter: string;
      };
    };
    responses: {
      /** response */
      200: {
        content: {
          "application/json": {
            user_actions: [
              {
                excerpt: string;
                action_type: number;
                created_at: string;
                avatar_template: string;
                acting_avatar_template: string;
                slug: string;
                topic_id: number;
                target_user_id: number;
                target_name: unknown;
                target_username: string;
                post_number: number;
                post_id: unknown;
                username: string;
                name: unknown;
                user_id: number;
                acting_username: string;
                acting_name: unknown;
                acting_user_id: number;
                title: string;
                deleted: boolean;
                hidden: unknown;
                post_type: unknown;
                action_code: unknown;
                category_id: number;
                closed: boolean;
                archived: boolean;
              }
            ];
          };
        };
      };
    };
  };
  sendPasswordResetEmail: {
    parameters: unknown;
    responses: {
      /** success response */
      200: {
        content: {
          "application/json": {
            success: string;
            user_found: boolean;
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          login: string;
        };
      };
    };
  };
  changePassword: {
    parameters: {
      path: {
        token: string;
      };
    };
    responses: {
      /** success response */
      200: unknown;
    };
    requestBody: {
      content: {
        "application/json": {
          username: string;
          password: string;
        };
      };
    };
  };
  getUserEmails: {
    parameters: {
      path: {
        username: string;
      };
    };
    responses: {
      /** success response */
      200: {
        content: {
          "application/json": {
            email: string;
            secondary_emails: [];
            unconfirmed_emails: [];
            associated_accounts: [];
          };
        };
      };
    };
  };
}

// eslint-disable-next-line @typescript-eslint/no-empty-interface
export interface external {}
